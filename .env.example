##############################################################################
# THE COMMISH - Environment Configuration
# 
# This file contains all environment variables needed for local development
# and production deployment. Copy this to `.env` and fill in actual values.
#
# SECURITY: Never commit the actual .env file to version control!
##############################################################################

# ============================================================================
# DATABASE (Supabase/Neon PostgreSQL with pgvector)
# ============================================================================
# These are auto-provided by Replit when you create a PostgreSQL database
# For local dev, get these from your Supabase project settings
DATABASE_URL=postgresql://user:password@host:5432/database
PGHOST=your-project.supabase.co
PGDATABASE=postgres
PGUSER=postgres
PGPASSWORD=your-supabase-password
PGPORT=5432

# ============================================================================
# DISCORD BOT CONFIGURATION
# ============================================================================
# Get these from: https://discord.com/developers/applications
# 1. Create a new application
# 2. Go to "Bot" section for DISCORD_TOKEN
# 3. Go to "General Information" for APPLICATION_ID and PUBLIC_KEY
# 4. Bot needs: Send Messages, Embed Links, Use Slash Commands permissions

DISCORD_TOKEN=your-discord-bot-token-here
DISCORD_APPLICATION_ID=your-application-id-here
DISCORD_PUBLIC_KEY=your-ed25519-public-key-here

# Discord OAuth2 (for user authentication)
# Get from: Discord Developer Portal > OAuth2
DISCORD_CLIENT_ID=your-oauth-client-id
DISCORD_CLIENT_SECRET=your-oauth-client-secret
DISCORD_REDIRECT_URI=https://thecommish.replit.app/api/auth/discord/callback

# ============================================================================
# AI/LLM SERVICES
# ============================================================================
# DeepSeek API - For chat completions and function calling
# Get from: https://platform.deepseek.com/api_keys
DEEPSEEK_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# OpenAI API - For text embeddings (text-embedding-ada-002)
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ============================================================================
# SLEEPER PLATFORM INTEGRATION
# ============================================================================
# Sleeper uses a public API - no auth required for read operations
# Just provide a league ID for testing
SLEEPER_LEAGUE_ID=your-test-league-id-here

# ============================================================================
# SESSION & SECURITY
# ============================================================================
# Generate a strong random string for session encryption
# Example: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SESSION_SECRET=your-super-secret-session-key-here-min-32-chars

# Admin API key for protected doctor/admin endpoints
# Generate: node -e "console.log('sk_admin_' + require('crypto').randomBytes(24).toString('hex'))"
ADMIN_API_KEY=sk_admin_your-secure-admin-key-here

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================
# Production or development mode
NODE_ENV=development

# Server port (Replit uses 5000 by default)
PORT=5000

# Application base URL (no trailing slash)
APP_URL=https://thecommish.replit.app

# Demo mode (set to 'true' for testing without Discord OAuth)
DEMO_MODE=false

# Beta mode (controls feature access)
BETA_MODE=true

# ============================================================================
# CYPRESS E2E TESTING
# ============================================================================
# Required for running automated tests
CYPRESS_APP_URL=https://thecommish.replit.app
CYPRESS_API_URL=https://thecommish.replit.app

# A valid league UUID from your database for testing
CYPRESS_LEAGUE_UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx

# Discord channel ID where test announcements can be sent
CYPRESS_DISCORD_CHANNEL_ID=1234567890123456789

# ============================================================================
# FRONTEND ENVIRONMENT VARIABLES (VITE_* prefix)
# ============================================================================
# These are exposed to the browser, so never put secrets here!
VITE_APP_NAME=THE COMMISH
VITE_API_BASE_URL=/api

# ============================================================================
# OPTIONAL: SUPABASE INTEGRATION
# ============================================================================
# If using Supabase for additional features (storage, auth, etc.)
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-public-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-secret-key

##############################################################################
# SETUP INSTRUCTIONS
##############################################################################
#
# 1. DATABASE SETUP:
#    - Create a Supabase project OR use Replit's built-in PostgreSQL
#    - Enable pgvector extension: CREATE EXTENSION IF NOT EXISTS vector;
#    - Run migrations: npm run db:push
#
# 2. DISCORD BOT SETUP:
#    - Create app at https://discord.com/developers/applications
#    - Enable bot, get token
#    - Set Interactions Endpoint URL: https://thecommish.replit.app/api/discord/interactions
#    - Register slash commands: npm run discord:register
#    - Invite bot to your server with scopes: bot, applications.commands
#
# 3. AI SERVICES SETUP:
#    - Sign up for DeepSeek: https://platform.deepseek.com
#    - Sign up for OpenAI: https://platform.openai.com
#    - Add credits/billing to both accounts
#
# 4. FIRST RUN:
#    - Copy this file to `.env`: cp .env.example .env
#    - Fill in all values above
#    - Install dependencies: npm install
#    - Push database schema: npm run db:push
#    - Start development server: npm run dev
#
# 5. TESTING:
#    - Validation: chmod +x scripts/validate-phase-5.7.sh && ./scripts/validate-phase-5.7.sh
#    - E2E Tests: npx cypress run
#    - Golden League: tsx scripts/set-golden-league.ts
#
##############################################################################

##############################################################################
# IMPORTANT REPLIT SECRETS
##############################################################################
# 
# In Replit, set these in the Secrets tab (ðŸ”’ icon in left sidebar):
# 
# Required for production:
# - DISCORD_TOKEN
# - DISCORD_APPLICATION_ID  
# - DISCORD_PUBLIC_KEY
# - DISCORD_CLIENT_ID
# - DISCORD_CLIENT_SECRET
# - DEEPSEEK_API_KEY
# - OPENAI_API_KEY
# - SESSION_SECRET
# - ADMIN_API_KEY
# - DATABASE_URL (auto-provided)
#
# Required for testing:
# - CYPRESS_LEAGUE_UUID
# - CYPRESS_DISCORD_CHANNEL_ID
#
##############################################################################

##############################################################################
# CRITICAL API ENDPOINTS
##############################################################################
#
# v3 Routes (league_id in body/query, NOT path):
# - POST /api/v3/constitution/sync
# - GET  /api/v3/constitution/drafts?league_id=
# - POST /api/v3/constitution/apply
# - POST /api/v3/constitution/reject
# - GET  /api/v3/features?league_id=
# - POST /api/v3/features
# - GET  /api/v3/jobs?league_id=
# - POST /api/v3/jobs/upsert
# - POST /api/v3/jobs/run-now
# - POST /api/v3/rules/ask
#
# v2 Admin Routes (require ADMIN_API_KEY):
# - GET  /api/v2/doctor/discord (public)
# - GET  /api/v2/doctor/cron/detail (requires auth)
# - POST /api/v2/doctor/cron/enqueue/content?dry=true
#
# Legacy Routes:
# - POST /api/announce/send (leagueId in body)
#
##############################################################################

##############################################################################
# DATABASE SCHEMA NOTES
##############################################################################
#
# All tables use UUID primary keys with server-generated defaults:
# - accounts, users, leagues, members, reactions, jobs, etc.
# - Vector embeddings stored in constitution_chunks (pgvector)
# - Session storage in sessions table (connect-pg-simple)
#
# Key relationships:
# - accounts -> users (1:1)
# - leagues -> members (1:N)
# - leagues -> jobs (1:N for each job type)
# - leagues -> constitution_chunks (1:N for RAG)
#
# Important: Never change primary key types (UUID) or use ::uuid casts
# Migration: Always use `npm run db:push` or `npm run db:push --force`
#
##############################################################################

##############################################################################
# KNOWN ISSUES & GOTCHAS
##############################################################################
#
# 1. UUID Guards: All v3 routes validate league_id format (no lg_demo_* allowed)
# 2. Demo Mode: Hard-wall separation prevents UUID guards from seeing demo IDs
# 3. Content Poster: Requires non-null channelId (returns 422 if missing)
# 4. Idempotency: Constitution sync uses settings_hash, announcements use SHA-256
# 5. Rate Limits: @everyone announcements have 24h cooldown per league
# 6. Discord Snowflakes: Always strings, never coerce to numbers
# 7. Admin Protection: Doctor routes require "Authorization: Bearer $ADMIN_API_KEY"
#
##############################################################################
