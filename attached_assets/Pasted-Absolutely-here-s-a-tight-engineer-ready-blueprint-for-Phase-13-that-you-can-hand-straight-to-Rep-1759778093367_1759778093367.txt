Absolutely‚Äîhere‚Äôs a tight, engineer-ready blueprint for ‚ÄúPhase 13‚Äù that you can hand straight to Replit Agent as the next pass. It‚Äôs organized into five workstreams with concrete deliverables, API contracts, schema, Discord commands, UX, and tests. Everything is additive and health-first (no breaking existing flows).

‚∏ª

THE COMMISH ‚Äî Phase 13 Work Order (Next Pass)

Core Goals
	1.	Mirror Sleeper league settings ‚Üî Constitution (safe, reversible).
	2.	Add message-level behaviors (smart reactions policy).
	3.	Controlled @everyone announcements with guardrails.
	4.	DeepSeek function-calling for explain/recap Q&A with RAG.
	5.	Background job safety: rate-limits, retries, idempotency, and visibility.

Deliverables are grouped as: schema ‚Üí backend services ‚Üí API/contracts ‚Üí Discord commands ‚Üí UI/UX ‚Üí tests/acceptance.

‚∏ª

13.1 Sleeper ‚Üí Constitution Sync (reversible ‚Äúproposed changes‚Äù)

Schema (idempotent)

-- Tracks calculated diffs before applying to Constitution
CREATE TABLE IF NOT EXISTS constitution_drafts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id uuid NOT NULL,
  source text NOT NULL,                   -- 'sleeper-sync'
  status text NOT NULL DEFAULT 'PENDING', -- PENDING | APPLIED | REJECTED | EXPIRED
  proposed jsonb NOT NULL,                -- proposed changes object
  created_at timestamptz DEFAULT now(),
  applied_at timestamptz
);

-- Optional: store last applied mapping checksum for quick detect
ALTER TABLE sleeper_integrations
  ADD COLUMN IF NOT EXISTS last_settings_hash text;

Mapping Table (server/services/sleeperMapping.ts)

Define a deterministic map of Sleeper settings ‚Üí Constitution clauses:

export const sleeperToConstitutionMap = {
  // settingKey: { pathInConstitution, transform, label }
  playoff_teams: { path: "Playoffs.team_count", label: "Playoff Teams" },
  playoff_round_type: { path: "Playoffs.round_type", label: "Playoff Round Type" },
  trade_deadline: { path: "Trades.deadline_week", label: "Trade Deadline (week)" },
  waiver_type: { path: "Waivers.type", label: "Waiver Type" },
  keeper_count: { path: "Keepers.count", label: "Keeper Count" },
  scoring_settings: { path: "Scoring", label: "Scoring Settings" },
  roster_positions: { path: "Roster.positions", label: "Roster Positions" },
  // add more as needed
} as const;

Backend Services
	‚Ä¢	SleeperDiffService.buildDraft(leagueId)
	‚Ä¢	Pull sleeper_integrations.settings + current Constitution JSON (or clauses DB).
	‚Ä¢	Compute diff (additions/updates/removals) using map above.
	‚Ä¢	Create constitution_drafts(PENDING) with proposed payload, and return a render-ready diff summary + checksum.
	‚Ä¢	SleeperDiffService.applyDraft(draftId, actor)
	‚Ä¢	Apply proposed changes into Constitution store (your current rules storage).
	‚Ä¢	Set status=APPLIED, applied_at=now(), write audit bot_activity(kind='CONSTITUTION_APPLY').

API (backend)

// POST /api/constitution/drafts/sleeper/:leagueId (build)
=> 200 { draftId, summary: { items:[{label, from, to, path}] }, checksum }

// POST /api/constitution/drafts/:draftId/apply
=> 200 { ok:true, appliedAt }

// POST /api/constitution/drafts/:draftId/reject
=> 200 { ok:true, status:'REJECTED' }

// GET /api/constitution/drafts/:leagueId
=> 200 { items: [ { id, status, created_at, summary } ] }

Discord Commands
	‚Ä¢	/constitution draft ‚Üí generate Sleeper->Constitution proposed changes; respond with short summary + dashboard link.
	‚Ä¢	/constitution apply <draft_id> ‚Üí privileged (commissioner) apply.
	‚Ä¢	/constitution reject <draft_id> ‚Üí privileged reject.

UI/UX (Dashboard)
	‚Ä¢	League ‚Üí Constitution ‚Üí ‚ÄúProposed Changes‚Äù tab
	‚Ä¢	Table: Label | Before | After | Path | [Apply] [Reject] buttons.
	‚Ä¢	Show source ‚ÄúSleeper Sync‚Äù, draft timestamp, and checksum.
	‚Ä¢	Toasts and optimistic updates; never auto-apply.

Tests / Acceptance
	‚Ä¢	Build draft: If Sleeper settings change, a PENDING draft is created with correct diff items.
	‚Ä¢	Apply: Applying updates Constitution, persists APPLIED status, emits bot_activity.
	‚Ä¢	Idempotence: Rebuilding with same hash yields 0 changes.

‚∏ª

13.2 Message-Level Behaviors: Reactions Policy

Schema

ALTER TABLE leagues
  ADD COLUMN IF NOT EXISTS reaction_policy jsonb
  DEFAULT jsonb_build_object(
    'enabled', false,
    'filters', jsonb_build_array(
      jsonb_build_object('kind','sentiment','gte',0.6,'react','üëç'),
      jsonb_build_object('kind','keyword','include',['gg','nice'],'react','‚ù§Ô∏è')
    ),
    'rate', jsonb_build_object('per_min', 8, 'burst', 5)
  );

Backend Service
	‚Ä¢	ReactionPolicy.evaluate(message) ‚Üí returns null or {emoji:'üëç'}.
	‚Ä¢	Rate-limit guard per guild/channel using token-bucket (Redis-less in-process bucket is OK to start; later: Upstash/Redis).

Discord Gateway
	‚Ä¢	On MESSAGE_CREATE (non-bot):
	‚Ä¢	Load league‚Äôs reaction_policy.
	‚Ä¢	Evaluate sentiment (basic: OpenAI ‚Äútext-embedding-3-small‚Äù + tiny heuristic, or simpler regex to start).
	‚Ä¢	If allowed & within rate, PUT /channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me.

UI/UX (Dashboard)
	‚Ä¢	Automation ‚Üí Reactions Policy toggle + editor:
	‚Ä¢	Enable, filters table (kind=sentiment/keyword/author), threshold/keywords, result emoji.
	‚Ä¢	Rate limit configuration (per_min, burst).
	‚Ä¢	‚ÄúTest policy‚Äù action: paste sentence ‚Üí preview emoji decision.

Tests / Acceptance
	‚Ä¢	When enabled and message matches filter, bot reacts once; otherwise not.
	‚Ä¢	Respects rate limits (no spam).
	‚Ä¢	Disabled flag fully suppresses reactions.

‚∏ª

13.3 Controlled @everyone Announcements

Schema

ALTER TABLE leagues
  ADD COLUMN IF NOT EXISTS announce_policy jsonb
  DEFAULT jsonb_build_object(
    'enabled', true,
    'cooldown_sec', 86400,   -- 1/day
    'allow_roles', ['Commissioner'],
    'require_confirm', true
  );

Backend
	‚Ä¢	AnnounceService.canAnnounce(leagueId, actor) ‚Üí check cooldown & role.
	‚Ä¢	AnnounceService.post(leagueId, channelId, content, mention='@everyone'|'@here'|roleId)
	‚Ä¢	Logs bot_activity(kind='ANNOUNCE', status='SUCCEEDED/FAILED').
	‚Ä¢	Schedules future (optional) with node-cron using idempotency keys announce:${leagueId}:${hash(content)}.

Discord Commands
	‚Ä¢	/announce preview text:<content> ‚Üí returns preview and policy status.
	‚Ä¢	/announce send text:<content> mention:<@everyone/@here/@role> ‚Üí privileged; respects cooldown; if require_confirm, responds with a button (‚ÄúConfirm send‚Äù) to proceed.

UI/UX (Dashboard)
	‚Ä¢	Automation ‚Üí Announcements
	‚Ä¢	Policy settings (cooldown, allowed roles, require confirmation).
	‚Ä¢	‚ÄúSend announcement‚Äù form with live preview, mentions selector, and a visible cooldown indicator.

Tests / Acceptance
	‚Ä¢	Cooldown enforced per league.
	‚Ä¢	Only allowed roles can send.
	‚Ä¢	Confirm flow works when required.
	‚Ä¢	Activities visible in dashboard‚Äôs Activity feed.

‚∏ª

13.4 DeepSeek Function-Calling for Explain/Recap (with RAG)

Tooling & Contracts

Define standardized tools for LLM to call:

// server/ai/tools.ts
export const tools = {
  fetch_rule: {
    description: "Get constitution rule/section by path or keyword",
    parameters: { type: "object", properties: { query: { type: "string" }}, required:["query"] }
  },
  fetch_setting: {
    description: "Get current league setting (from Sleeper sync)",
    parameters: { type: "object", properties: { key: { type: "string" }}, required:["key"] }
  },
  summarize_thread: {
    description: "Summarize latest N messages in a channel",
    parameters: { type: "object", properties: { channelId: {type:"string"}, limit: {type:"integer"}}, required:["channelId"] }
  },
  generate_recap: {
    description: "Create a league weekly recap using standings/sleeper data + top highlights",
    parameters: { type: "object", properties: { week:{type:"integer"}}, required:["week"] }
  }
};

Backend Endpoints

// POST /api/ai/ask   { leagueId, question }
=> streams an answer; under the hood: RAG retrieve(rag_docs), tool calls via DeepSeek function-calling.

// POST /api/ai/recap { leagueId, week? }
=> returns markdown + embeds; stored in bot_activity; can auto-post to Discord with /announce guard.

RAG Integration
	‚Ä¢	Use existing rag_docs as corpus.
	‚Ä¢	Retriever: cosine on embeddings (1536D), top-k=8, windowed merges.
	‚Ä¢	Prompt: system prompt with league persona + ‚ÄúUse tools when asked about precise rules or settings‚Äù.
	‚Ä¢	Cache: 5‚Äì15 min result cache keyed by (leagueId, questionHash).

Discord Commands
	‚Ä¢	/ask question:<text> ‚Üí tool-calling path; short answer + ‚Äúshow sources‚Äù button.
	‚Ä¢	/explain-rule query:<text> ‚Üí rule lookup + plain English explanation.
	‚Ä¢	/recap week:<number> ‚Üí generates recap; offers ‚ÄúSend to #channel‚Äù button (flows into announce policy).

UI/UX
	‚Ä¢	AI ‚Üí Q&A: input with streaming answer + ‚ÄúInsert sources‚Äù toggle.
	‚Ä¢	AI ‚Üí Recaps: dropdown by week ‚Üí preview markdown + ‚ÄúPost to Discord‚Äù button.

Tests / Acceptance
	‚Ä¢	Tools resolve properly (e.g., fetch_setting('waiver_type') returns current mapped value).
	‚Ä¢	RAG retrieves relevant docs and cites sources.
	‚Ä¢	Recap generation succeeds with league data present; announcement respects policy.

‚∏ª

13.5 Background Job Safety: Rate-Limits, Retries, Idempotency, Visibility

Rate-Limiters
	‚Ä¢	Create a simple token bucket per leagueId:feature in memory:
	‚Ä¢	ratelimit.acquire(key, cost=1) returns boolean.
	‚Ä¢	Keys: react:${guildId}, announce:${leagueId}, ingest:${leagueId}, sleeper:${leagueId}.
	‚Ä¢	Configurable via features JSON per league.

Retries & Backoff
	‚Ä¢	Wrap external calls (Discord, Sleeper, OpenAI/DeepSeek) with:
	‚Ä¢	MAX_RETRIES=3, BASE_DELAY=500ms, jittered exponential (delay = base * 2^attempt * (1 + rand(0,0.3))).
	‚Ä¢	Only retry on transient HTTP 429/5xx and network errors.

Idempotency
	‚Ä¢	All scheduled and command handlers compute an idempotency key (e.g., kind + leagueId + hash(payload)), stored in bot_activity.key.
	‚Ä¢	Executors must check for status='SUCCEEDED' with same key before executing again.

Visibility
	‚Ä¢	Extend /api/dashboard/activity/:leagueId to include key and request_id.
	‚Ä¢	Add simple Ops ‚Üí Jobs page: filters by kind/status, retry buttons (admin only).

Tests / Acceptance
	‚Ä¢	Reaction flood prevented by limiter.
	‚Ä¢	Retries occur on 429 until success or max attempts; logs show backoff.
	‚Ä¢	Duplicate recap job with same key is skipped.

‚∏ª

End-to-End Acceptance (Phase 13)
	1.	Sleeper‚ÜíConstitution
	‚Ä¢	Change a Sleeper setting ‚Üí ‚ÄúProposed Changes‚Äù contains correct diff ‚Üí Apply updates rules ‚Üí Activity shows APPLY.
	2.	Reactions
	‚Ä¢	Enable policy; post ‚Äúgg‚Äù ‚Üí bot ‚ù§Ô∏è once; exceeds per-minute ‚Üí suppressed.
	3.	Announcements
	‚Ä¢	Non-commissioner blocked; commissioner passes; second send within cooldown blocked.
	4.	AI Q&A & Recap
	‚Ä¢	/explain-rule cites correct section (via RAG).
	‚Ä¢	/recap week:5 produces markdown preview; posting honors announce policy.
	5.	Safety
	‚Ä¢	429 from Discord ‚Üí retried with backoff; no duplicates thanks to idempotency; activity feed shows attempts.

‚∏ª

Delivery Order (safe, incremental)
	1.	13.5 Safety layer (limiters/retries/idempotency) ‚Äì foundation.
	2.	13.1 Sleeper‚ÜíConstitution drafts (backend + UI).
	3.	13.2 Reactions policy (minimal viable: keyword + rate-limit).
	4.	13.3 Announce policy (cooldown + confirm).
	5.	13.4 DeepSeek tools + RAG plumbing (then commands & UI).
	6.	Polish & tests (Playwright + API tests).

‚∏ª

Minimal Code Stubs To Create
	‚Ä¢	server/services/sleeperMapping.ts (map + diff helpers)
	‚Ä¢	server/services/constitutionDrafts.ts (build/apply/reject)
	‚Ä¢	server/services/reactionPolicy.ts (evaluate + rate-limit)
	‚Ä¢	server/services/announceService.ts (policy + post + schedule)
	‚Ä¢	server/ai/tools.ts and server/ai/agent.ts (DeepSeek function-calling adapter)
	‚Ä¢	client/src/pages/ConstitutionDrafts.tsx (UI)
	‚Ä¢	Dashboard sections: Automation ‚Üí Reactions, Automation ‚Üí Announcements, AI ‚Üí Q&A/Recaps

‚∏ª

If you want, I can follow this with patch-ready snippets (file-level diffs) for each stub and the new endpoints. This plan keeps everything reversible and protects production health while leveling up the feature set you asked for.