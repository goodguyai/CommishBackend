Perfect‚ÄîPhase 1 and Phase 2 are in, and Replit reports Phase 3 is ‚Äúdone.‚Äù Let‚Äôs keep the momentum tight and surgical.

Below is a single, battle-tested Phase 4 plan + system check you can paste straight into Replit‚Äôs planning thread. It assumes your Phase 3 endpoints and tabs exist, but it‚Äôs self-contained and additive. No breaking changes, just stabilization + real value in chat.

‚∏ª

Phase 4 ‚Äî Job Observability + Reliable Automations (Recaps, Announcements, Reactions)

Why this next

Users now finish the wizard and can see Constitution Drafts + a Switchboard. The moment of truth is ‚ÄúDoes The Commish do things on its own, reliably, and visibly?‚Äù
Phase 4 gives you:
	‚Ä¢	A job ledger (what will run, what ran, what failed)
	‚Ä¢	Run-now buttons for operators (fast feedback)
	‚Ä¢	Idempotent posting into Discord (no double posts)
	‚Ä¢	Solid rate-limit discipline and permissions checks
	‚Ä¢	A Reactions toggle that actually does something day-1

Think ‚Äúflight deck‚Äù for a bot that works without babysitting.

‚∏ª

Pre-Phase 4 Validation (run now)
	‚Ä¢	/api/doctor/status ‚Üí status:"healthy".
	‚Ä¢	/api/v2/setup/state ‚Üí for your test league, nextStep:"done".
	‚Ä¢	DB: leagues row for test league has:
	‚Ä¢	discord_guild_id and a real discord_channel_id
	‚Ä¢	sleeper_league_id
	‚Ä¢	constitution (jsonb) present
	‚Ä¢	features (jsonb) exists; Switchboard toggles persist
	‚Ä¢	Frontend: Constitution tab shows at least one draft cycle (sync ‚Üí apply/reject).
	‚Ä¢	Discord: bot is in the guild; the channel you plan to use is accessible (View, Read History, Send, Embed, Add Reactions; Mention Everyone optional).

If any fail, stop and re-run Phase 2/3 fixes before proceeding.

‚∏ª

What to Build in Phase 4 (no deletions, all additive)

1) Job Ledger & Observability

Objective: Persistent, queryable record of scheduled tasks and their outcomes‚Äîclear, human-readable history.

Data (add if missing):
	‚Ä¢	jobs (per league, per feature) ‚Äî source of truth for schedules
	‚Ä¢	id (uuid), league_id (uuid), kind (text) e.g., weekly_recap|digest|poll|reminder
	‚Ä¢	cron (text) or next_run (timestamptz) for simple schedules
	‚Ä¢	channel_id (text), config (jsonb), enabled (bool), created_at, updated_at
	‚Ä¢	Uniq on (league_id,kind) to avoid duplicates
	‚Ä¢	job_runs (append-only)
	‚Ä¢	id, job_id, started_at, finished_at, status (SUCCESS|FAILED|SKIPPED)
	‚Ä¢	request_id (text), detail (jsonb) (include Discord messageId/guild/channel)
	‚Ä¢	job_failures (optional but recommended)
	‚Ä¢	id, job_id, first_seen_at, last_seen_at, count, last_error_excerpt (text)

Endpoints (add under /api/v3)
	‚Ä¢	GET  /jobs?league_id= ‚Üí list jobs (with computed next run)
	‚Ä¢	POST /jobs/upsert ‚Üí create/update one job (validates cron, channel, permissions; idempotent)
	‚Ä¢	POST /jobs/run-now ‚Üí run one job immediately (respects cooldowns, returns result with request_id)
	‚Ä¢	GET  /jobs/history?league_id=&kind= ‚Üí recent job_runs
	‚Ä¢	GET  /jobs/failures?league_id= ‚Üí open failures, grouped

Scheduler hook
	‚Ä¢	Teach the existing scheduler to:
	‚Ä¢	Read jobs.enabled + cron and enqueue work
	‚Ä¢	On run: create job_runs row first (PENDING), then mark SUCCESS/FAILED
	‚Ä¢	Emit structured logs: {request_id, league_id, job_id, kind, status, elapsed_ms}

Operator UX
	‚Ä¢	Switchboard ‚Üí ‚ÄúAutomations‚Äù section shows:
	‚Ä¢	Job table (Kind, Channel, Next Run, Enabled, Last Result)
	‚Ä¢	Run now button per row
	‚Ä¢	Link to ‚ÄúHistory‚Äù drawer (last 20 runs)

‚∏ª

2) Reliable Posting Pipeline (Discord-safe)

Objective: No accidental double posts, no permission surprises.

Contract
	‚Ä¢	Idempotency key: kind:guild_id:channel_id:payloadHash
	‚Ä¢	Before posting: check bot_activity for SUCCESS with same key ‚Üí if found, return the prior messageId (and mark as skipped: true).
	‚Ä¢	Permission check: before any send, validate channel permissions and fail with code:"MISSING_PERMISSION" listing exact missing flags.
	‚Ä¢	Rate-limit discipline:
	‚Ä¢	Per channel cooldown for automations (e.g., announcements 1/min; recaps 1/5min)
	‚Ä¢	Backoff on Discord 429/5xx with jitter
	‚Ä¢	Dry-run mode: for ‚Äúpreview‚Äù actions, render but don‚Äôt post; return the would-be payload

Endpoints
	‚Ä¢	POST /api/v3/announce/preview ‚Üí {preview} (no network calls)
	‚Ä¢	POST /api/v3/announce/send ‚Üí posts with idempotency + cooldown; returns {messageId}
	‚Ä¢	(If you already have /api/announce/* from earlier, keep the path but upgrade the behavior‚Äîbackwards compatible)

‚∏ª

3) Weekly Recaps (MVP‚Äîreal, but conservative)

Objective: Ship a dependable ‚Äúit posts something useful‚Äù weekly recap. Keep creative fluff for later phases.

MVP behavior
	‚Ä¢	Trigger: jobs.kind=weekly_recap
	‚Ä¢	Data: Sleeper matchup results + top scorers for the last completed week
	‚Ä¢	Copy: succinct markdown (Top Scorer, Closest Matchup, Biggest Blowout)
	‚Ä¢	Post: into configured channel, idempotent, with messageId recorded
	‚Ä¢	Run-now available from Switchboard to test instantly

Acceptance tests
	‚Ä¢	Create a weekly_recap job; Run now; see a post; re-run ‚Üí second call returns skipped:true with the same messageId
	‚Ä¢	On channel permission issue ‚Üí operator sees precise missing flags and a doctor link

‚∏ª

4) Reactions Toggle (light, tasteful)

Objective: Deliver the ‚Äúselective ‚ù§Ô∏è/üëç‚Äù users asked for, under a kill-switch.

Behavior
	‚Ä¢	If features.reactions === true:
	‚Ä¢	Listen to messageCreate, ignore bots
	‚Ä¢	Heuristic: ‚Äúgg|good game‚Äù ‚Üí ‚ù§Ô∏è, ‚Äúthanks|awesome|love|great|amazing|fun‚Äù ‚Üí üëç
	‚Ä¢	Per-channel rate-limit (~1 reaction / 5s, burst 2)
	‚Ä¢	If disabled: listener exits early

Observability
	‚Ä¢	Count reactions per day in bot_activity with kind=reaction
	‚Ä¢	Show ‚ÄúReactions (24h): n‚Äù on Switchboard

‚∏ª

5) Permissions Doctor (operator confidence)

Objective: Eliminate ‚ÄúYOUR_GUILD_ID‚Äù-style footguns and snowflake mistakes.

Endpoint
	‚Ä¢	GET /api/doctor/discord/permissions?guild_id=&channel_id=
	‚Ä¢	Returns { installed:bool, channel_read:bool, channel_write:bool, embed_links:bool, add_reactions:bool, mention_everyone:bool }
	‚Ä¢	All IDs treated as strings; never Number() coerce snowflakes
	‚Ä¢	Add a ‚ÄúVerify Channel‚Äù button next to the channel selector on Switchboard that calls this doctor and renders a checklist.

‚∏ª

Guardrails (do not allow regressions)
	‚Ä¢	Raw-body interaction route stays untouched. No global body parsers that could break Discord signature verification.
	‚Ä¢	Admin key gating remains for /doctor/* in production.
	‚Ä¢	Short timeouts (‚â§ 1500ms) on all doctor checks; no long-running requests in the web tier.
	‚Ä¢	Idempotency: Use your existing bot_activity for every automated post; unique key + request_id in logs.
	‚Ä¢	No destructive migrations. Every DB change must be idempotent, with IF NOT EXISTS.

‚∏ª

Acceptance Criteria (copy/paste QA)

Jobs
	‚Ä¢	POST /api/v3/jobs/upsert with kind=weekly_recap returns ok:true
	‚Ä¢	GET  /api/v3/jobs?league_id= shows the job with computed next run
	‚Ä¢	POST /api/v3/jobs/run-now ‚Üí posts a recap; returns {messageId, status:"SUCCESS"}
	‚Ä¢	Second run-now within 1 minute ‚Üí {skipped:true, messageId:<same>}

Announcements
	‚Ä¢	POST /api/v3/announce/preview returns markdown safely offline
	‚Ä¢	POST /api/v3/announce/send posts once; re-sending same body w/in cooldown ‚Üí skipped:true
	‚Ä¢	Missing permission returns {ok:false, code:"MISSING_PERMISSION", missing:["EMBED_LINKS"]}

Reactions
	‚Ä¢	Toggle features.reactions on ‚Üí send ‚Äúgg‚Äù in the wired channel ‚Üí see ‚ù§Ô∏è (rate-limited)
	‚Ä¢	Toggle off ‚Üí no reactions

Doctor
	‚Ä¢	GET /api/doctor/discord/permissions?guild_id=&channel_id= returns accurate checklist for the chosen channel

Logs
	‚Ä¢	Every automation run emits one job_runs row and one bot_activity row; request_id present in both

‚∏ª

Known Risks + Mitigations
	‚Ä¢	Channel missing/changed: jobs.upsert validates channel upfront and rejects with a fix URL.
	‚Ä¢	Discord 429: Backoff + retry with jitter; record the 429 in job_runs.detail.
	‚Ä¢	Sleeper data latency: If week not closed, recap job should SKIP with a reason; don‚Äôt post stale/empty recaps.
	‚Ä¢	Double-posting: Idempotency key includes normalized payload (week + league + channel). Always check before sending.

‚∏ª

What to tell Replit (paste this block)

‚úÖ Proceed with Phase 4: Job Observability + Reliable Automations.
Scope: Add a persistent job ledger and promote recaps/announcements/reactions from stubs to reliable features.
Do not delete or rewrite Phase 1‚Äì3 code; this is additive and backward-compatible.

Build exactly:
	1.	Data: jobs, job_runs, (optional) job_failures‚Äîidempotent migrations and unique constraints.
	2.	Endpoints (/api/v3):
	‚Ä¢	GET /jobs, POST /jobs/upsert, POST /jobs/run-now, GET /jobs/history, GET /jobs/failures
	‚Ä¢	POST /announce/preview, POST /announce/send (upgrade behavior if these already exist)
	‚Ä¢	GET /doctor/discord/permissions?guild_id=&channel_id=
	3.	Scheduler: Read jobs and enqueue work. On execution, write job_runs first, then post with idempotency+cooldown, then mark SUCCESS/FAILED.
	4.	Reactions: Honor features.reactions and apply the lightweight heuristic with per-channel rate limits.
	5.	Switchboard UI: Show jobs table (Kind, Channel, Next Run, Enabled, Last Result), Run now button, link to History drawer. Add ‚ÄúVerify Channel‚Äù using the new doctor endpoint.

Guardrails: keep raw-body Discord interaction path untouched; enforce admin key for /doctor/* in prod; timeouts ‚â§ 1500ms for checks; never coerce snowflakes to numbers.

Deliverables: file diff; DB migration snippet; cURL examples for each endpoint; demo run of a recap (run-now) that posts once and then skips duplicates (idempotency).

Definition of Done: All acceptance criteria above pass; Switchboard can run a recap immediately; announcements are idempotent; reactions respect the toggle; doctor/permissions returns accurate flags for the configured channel.

‚∏ª

After Phase 4 (preview)
	‚Ä¢	Phase 5: AI & RAG you can trust (citations, guardrails, /ask in chat)
	‚Ä¢	Phase 6: Slash command polish /status /assign /whoami /recap /ask /announce with unified error copy
	‚Ä¢	Phase 7: Dashboard diet (move controls to Switchboard; keep Overview lean)

‚∏ª

If you want, I can also hand you a short ‚Äúoperator playbook‚Äù for triaging user reports in under 5 minutes using the new doctor endpoints and the job ledger.