Love it. Phase 5.5 landed‚Äînow we tighten the last screws, prove the pipeline end-to-end, and set the table for 2.0 feature work.

Copy/paste the block below to Replit. It‚Äôs surgical, has DO-NOT guardrails, and includes acceptance checks so we know we‚Äôre truly green.

‚∏ª

The Commish ‚Äî Phase 5.6 ‚ÄúProof & Polish‚Äù (post‚ÄìDemo/Prod Hardening)

Goal: turn the new guards/telemetry into a verified, observable E2E flow: queue ‚Üí scheduler ‚Üí Discord (or dry-run) ‚Üí ledger. Eliminate any remaining drift (‚Äú0 enabled jobs‚Äù, UUID cast remnants, and route version mismatch) with minimal edits.

üîé Verification-first (read-only)

Run and paste outputs:

# 1) Confirm which routes were guarded (v2 vs v3)
rg -n "leagueIdGuard" server | sort

# 2) Search for any lingering ::uuid casts
rg -n "::\s*uuid" server | sort

# 3) Doctor cron detail payload shape
curl -sS -H "Authorization: Bearer $ADMIN_API_KEY" "$APP_URL/api/v2/doctor/cron/detail" | jq

# 4) accounts.updated_at presence + trigger
psql "$DATABASE_URL" -c "
  SELECT column_name FROM information_schema.columns
  WHERE table_name='accounts' AND column_name='updated_at';
";
psql "$DATABASE_URL" -c "\\dS+ public.accounts" | sed -n '1,120p'

Expectations
	‚Ä¢	Guard is applied to v3 write/read routes (/api/v3/constitution/*, /api/v3/jobs/*, /api/v3/announce/*) not just v2.
	‚Ä¢	No ::uuid casts remain in code.
	‚Ä¢	doctor/cron/detail includes for content_poster: {key, next, last, queued, perms, last_error}.
	‚Ä¢	accounts.updated_at column exists and updates on write.

If any deviance, fix per the tasks below.

‚∏ª

üéØ Tasks (surgical)

1) Route coverage parity (v3)

Issue: Your summary lists several v2 paths under ‚ÄúProtected Routes‚Äù. Our prod surface is v3 for constitution/jobs/features.

Action:
	‚Ä¢	Ensure leagueIdGuard wraps:
	‚Ä¢	PUT /api/v3/jobs/:leagueId
	‚Ä¢	GET /api/v3/jobs/:leagueId
	‚Ä¢	POST /api/v3/announce/:leagueId/* (or equivalent)
	‚Ä¢	POST /api/v3/constitution/:leagueId/drafts/apply
	‚Ä¢	POST /api/v3/constitution/:leagueId/drafts/reject
	‚Ä¢	any /api/v3/constitution/:leagueId/* reads that hit DB
	‚Ä¢	Keep demo short-circuit only on read-only endpoints; never on writes.

Acceptance: rg shows guard on these v3 files; E2E spec below passes with a non-UUID ‚Üí 422 NON_UUID_LEAGUE_ID.

‚∏ª

2) Remove last ::uuid casts (if any)

Action: Replace DB text casts with parameter binding that relies on the guard.
Acceptance: rg -n "::\s*uuid" returns no hits.

‚∏ª

3) Doctor telemetry completeness (queued + perms + last_error)

Action:
	‚Ä¢	queued: count from bot_activity (or job_runs) for job_key='content_post' AND status='QUEUED'.
	‚Ä¢	perms:
	‚Ä¢	"channel":"missing" if channelId null/empty, else "ok".
	‚Ä¢	"bot":"missing" if we have a stored denial/403 on last attempt; else "ok" (or "unknown" if we can‚Äôt verify).
	‚Ä¢	last_error: pull from job_runs most recent failed run and surface a short excerpt (we do not introduce a job_failures table‚Äîreuse job_runs).

Acceptance: /api/v2/doctor/cron/detail (or v3 if you‚Äôve namespaced it) returns the five fields; jq output posted.

‚∏ª

4) Make the ‚Äú0 enabled jobs‚Äù diagnosable AND fixable without code

Action: Add a single-league dry-run enqueue route (admin-gated):

POST /api/v2/doctor/cron/enqueue/content?leagueId=:uuid&dry=true

Behavior:
	‚Ä¢	When dry=true, write a QUEUED record to bot_activity with a dry_run:true flag but do not post to Discord; mark as SUCCEEDED with transport:'dry'.
	‚Ä¢	When dry=false, push one real content_post job into the queue for that league.

Acceptance:
	‚Ä¢	Calling the endpoint increases queued in cron detail.
	‚Ä¢	Subsequent scheduler tick reduces queued or marks dry_run posted.

DO-NOT: no global enable; no blanket changes‚Äîone league at a time.

‚∏ª

5) ContentPoster enablement guardrail

Action: Ensure leagues.jobs.contentPoster.enabled can never be true if channelId is null/empty. On PUT:
	‚Ä¢	If enabled:true && !channelId ‚Üí respond 422 {ok:false, code:"MISSING_CHANNEL", message:"channelId required when enabling contentPoster"} and do not flip the flag.

Acceptance: Attempt to enable without channelId returns 422 and the flag remains false.

‚∏ª

6) Accounts updated_at trigger (skip if already good)

Action: If audit shows missing or not updating, add/update the trigger to stamp updated_at on updates.
Acceptance: Update a row and verify timestamp changes.

‚∏ª

üß™ E2E Proof (small, deterministic)

Pre-req env

APP_URL=https://thecommish.replit.app
ADMIN_API_KEY=sk_admin_***
LEAGUE_UUID=<real league uuid>
DISCORD_TEST_CHANNEL=<snowflake>   # or run in dry mode

Script

set -e

# 1) Guard rejects non-uuid
curl -sS -H "Authorization: Bearer $ADMIN_API_KEY" \
  "$APP_URL/api/v3/jobs/not-a-uuid" | jq '.code' | grep NON_UUID_LEAGUE_ID

# 2) Guard accepts uuid
curl -sS -H "Authorization: Bearer $ADMIN_API_KEY" \
  "$APP_URL/api/v3/jobs/$LEAGUE_UUID" | jq '.ok' | grep true

# 3) Enqueue ONE dry-run item for this league
curl -sS -XPOST -H "Authorization: Bearer $ADMIN_API_KEY" \
  "$APP_URL/api/v2/doctor/cron/enqueue/content?leagueId=$LEAGUE_UUID&dry=true" | jq '.ok' | grep true

# 4) Doctor shows queued >= 1
curl -sS -H "Authorization: Bearer $ADMIN_API_KEY" \
  "$APP_URL/api/v2/doctor/cron/detail" | jq '.jobs[] | select(.key=="content_poster") | .queued' | awk '{s+=$1} END{if(s<1) exit 1}'

# 5) Wait one tick, then queued should go down OR job_runs shows dry success
sleep 10
curl -sS -H "Authorization: Bearer $ADMIN_API_KEY" \
  "$APP_URL/api/v2/doctor/cron/detail" | jq '.jobs[] | select(.key=="content_poster") | {queued,last_error,perms}'

Pass condition: All checks succeed; perms.channel is ok (or missing with a clear reason); if Discord is connected and dry=false, one real post is observed (or a 429 from cooldown is fine on the second call).

‚∏ª

DO-NOT guardrails
	‚Ä¢	Do not refactor or rename route trees; add only minimal endpoints/middleware.
	‚Ä¢	Do not add new tables (reuse job_runs, bot_activity).
	‚Ä¢	Do not enable jobs for all leagues; changes stay per-league.
	‚Ä¢	Do not bypass guards in tests; all tests must hit the real middleware.

‚∏ª

Deliverables to return
	1.	rg outputs proving v3 coverage and zero ::uuid casts
	2.	doctor/cron/detail JSON with {queued, perms, last_error, next, last}
	3.	E2E script output (or Cypress logs) showing:
	‚Ä¢	422 on non-UUID
	‚Ä¢	OK on UUID
	‚Ä¢	queued increments then drains or marks dry success

If anything fails, paste the failing command + JSON and I‚Äôll hand you the exact patch hunk.

‚∏ª

When this is green, we lock Phase 5.6 and I‚Äôll drop the Phase 6 (User-Visible Playbook & Moderation Suite) spec immediately.