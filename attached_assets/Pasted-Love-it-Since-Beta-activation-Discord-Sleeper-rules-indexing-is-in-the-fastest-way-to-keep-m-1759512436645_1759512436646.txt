Love it. Since Beta activation (Discord + Sleeper + rules indexing) is in, the fastest way to keep momentum is a polish & reliability sprint that makes the app feel ‚Äúalive,‚Äù closes gaps commissioners will notice, and hardens the edges. Below is a one-shot, copy-paste work order for Replit with guardrails, a prioritized task list, tight acceptance tests, and UX/behavior details. It‚Äôs designed so the agent can run a lot in one go without going off the rails.

‚∏ª

üöÄ POLISH & RELIABILITY SPRINT ‚Äî ‚ÄúMake THE COMMISH feel complete‚Äù

0) Guardrails (don‚Äôt change)
	‚Ä¢	Keep APP_BASE_URL=https://thecommish.replit.app (no trailing slash).
	‚Ä¢	Database = Supabase only. No Neon/Replit DB. Schema changes only via migrations.
	‚Ä¢	Use the centralized env service; no new process.env reads inside routes/services.
	‚Ä¢	Keep /api/discord/interactions on express.raw + Ed25519 verification.
	‚Ä¢	Keep server/vite.ts /api guards and route order intact. No new catch-alls that swallow /api/*.
	‚Ä¢	Prefer /api/v2/* for any new endpoints (avoid CDN ghosts).

‚∏ª

1) API freshness & observability (quick wins)

Goal: API never caches stale HTML; easier to debug.

1.1 No-cache headers for all API responses
	‚Ä¢	Add middleware before all /api/* routes:
	‚Ä¢	Cache-Control: no-store, no-cache, must-revalidate
	‚Ä¢	Pragma: no-cache
	‚Ä¢	Expires: 0

1.2 Per-request ids + timing logs
	‚Ä¢	Small middleware: attach req.id (nanoid) and log method path status ms.

Acceptance

curl -I "$APP_BASE_URL/api/health" | grep -i cache-control   # no-store
curl -s "$APP_BASE_URL/api/health" | jq '.status'            # "ok"


‚∏ª

2) UX polish: Setup wizard ‚Äúfeels alive‚Äù

Goal: Zero dead-ends, helpful errors, smooth progress.

2.1 Microinteractions
	‚Ä¢	Add loading spinners on all ‚ÄúContinue‚Äù buttons.
	‚Ä¢	Add subtle success checkmarks after each step completes.
	‚Ä¢	Use toasts for errors with a ‚ÄúTry again‚Äù action.

2.2 Resume setup
	‚Ä¢	If session has an in-progress wizard, auto-resume correct step on /setup.

2.3 Better empty states
	‚Ä¢	If Sleeper returns no leagues: show ‚ÄúNo leagues found for {username} in {season}. Check spelling or change season.‚Äù
	‚Ä¢	If Discord has no writable channels: show a hint about channel permissions.

Acceptance
	‚Ä¢	Start wizard, refresh mid-way ‚Üí resumes same step.
	‚Ä¢	Error on Sleeper fetch ‚Üí visible toast + retry works.

‚∏ª

3) Commissioner Dashboard: finish the essentials

Goal: A single place to run the league day-to-day.

3.1 Feature Toggles panel (persist to leagues.featureFlags)
	‚Ä¢	Toggles: autoMeme, digestEnabled, highlights, rivalries, creativeTrashTalk, deepStats.
	‚Ä¢	Each toggle shows a short description + ‚ÄúLearn more‚Äù tooltip.

3.2 Channel Routing
	‚Ä¢	For each feature (digests, reminders, polls, highlights), let commissioner pick a channel (dropdown of bot-writable channels). Persist as leagues.channels.{featureKey} JSON.

3.3 Bot Personality
	‚Ä¢	Radio: Neutral / Sassy / Formal / Meme-y / Custom.
	‚Ä¢	Live preview box updates as they change. Persist leagues.personality.
	‚Ä¢	Preview endpoint /api/v2/personality/preview?style=...&text=... (just transforms text server-side; no LLM call here).

3.4 Digest controls
	‚Ä¢	Show next scheduled digest time.
	‚Ä¢	Buttons: ‚ÄúRun digest now‚Äù (posts to Discord) and ‚ÄúPreview digest‚Äù (renders JSON + screenshot-like card in UI).
	‚Ä¢	Wire to existing digest generator; use admin-key protected POST under the hood.

Acceptance

# After saving toggles:
curl -s "$APP_BASE_URL/api/leagues/<LEAGUE_ID>" | jq '.featureFlags.autoMeme'   # true/false

# Trigger digest preview:
curl -s -X POST "$APP_BASE_URL/api/v2/digest/preview?leagueId=<LEAGUE_ID>" -H "X-Admin-Key: $ADMIN_KEY" | jq '.summary'


‚∏ª

4) Owner Mapping (Discord user ‚Üî fantasy team)

Goal: Personal mentions in reminders, trades, and highlights.

4.1 Backend
	‚Ä¢	GET /api/v2/owners?leagueId=... ‚Üí list fantasy teams + mapped Discord users.
	‚Ä¢	POST /api/v2/owners/map { leagueId, teamId, discordUserId } ‚Üí upsert mapping.
	‚Ä¢	Store in members or a dedicated owner_links table via migration (idempotent, no destructive ops).

4.2 Frontend
	‚Ä¢	Drag-and-drop (or dual list) UI: map team cards to Discord users (autocomplete on @users).
	‚Ä¢	Show warnings for unmapped teams (so /remind lineup can @mention properly).

Acceptance

curl -s "$APP_BASE_URL/api/v2/owners?leagueId=<LEAGUE_ID>" | jq '.[0]'
curl -s -X POST "$APP_BASE_URL/api/v2/owners/map" -H "Content-Type: application/json" \
  -d '{"leagueId":"<LEAGUE_ID>","teamId":"<TEAM_ID>","discordUserId":"<DISCORD_ID>"}' | jq '.ok'


‚∏ª

5) Reminders & schedules (quality-of-life)

Goal: Useful automation with safe defaults.

5.1 Reminder presets
	‚Ä¢	Toggles: lineup lock (Sat & Sun morning, 60/30 min pre-kickoff), waiver day (Tue night/Wed morning), trade deadline countdown (last week daily).
	‚Ä¢	Persist as cron-like strings or structured JSON on leagues.reminders.

5.2 Post composer
	‚Ä¢	Form to craft a custom reminder (text + schedule), scoped to league channel.
	‚Ä¢	Save to a reminders table (migration) and schedule via existing scheduler on boot.

5.3 Safe job runner
	‚Ä¢	Ensure jobs are idempotent (use events table to dedupe by jobId + runAt).
	‚Ä¢	Discord 429 handling: exponential backoff + queue.

Acceptance

# Create a custom reminder:
curl -s -X POST "$APP_BASE_URL/api/v2/reminders" -H "Content-Type: application/json" \
  -d '{"leagueId":"<LEAGUE_ID>","channel":"<CHANNEL_ID>","text":"Set your lineup!","cron":"0 14 * * SAT"}' | jq '.ok'

# See it scheduled:
curl -s "$APP_BASE_URL/api/events?limit=10" | jq '.[] | select(.type=="reminder_scheduled")'


‚∏ª

6) RAG quality & Rules UX

Goal: /rules answers feel smart and traceable.

6.1 Rules library
	‚Ä¢	Keep a list of indexed documents per league; show title/version/date.
	‚Ä¢	Button: ‚ÄúRe-index latest rules‚Äù ‚Üí posts /reindex command, updates immediately.

6.2 Answer card style
	‚Ä¢	For /rules, send an embed with: top answer + ‚Äúsource: {doc title} ¬ß{section}‚Äù + ‚ÄúNot sure? Type /rules_addendum to teach me‚Äù (MVP stub).

6.3 Index safeguards
	‚Ä¢	Validate dimension = env; hash content for caching (already present).
	‚Ä¢	Add server-side chunking sanity: 512‚Äì1024 tokens per chunk; cap total chunks to prevent abuse.

Acceptance
	‚Ä¢	Paste rules in Step 3 ‚Üí /rules in Discord returns an embed with a source line.
	‚Ä¢	Re-index button swaps to new text correctly.

‚∏ª

7) Engagement: Polls, Highlights, Rivalries polish

Goal: Pressable fun that never breaks.

7.1 Polls
	‚Ä¢	/poll "question" | opt1 | opt2 | opt3 ‚Üí posts reactions automatically; closes after N hours; prints results.
	‚Ä¢	Dashboard ‚ÄúQuick Poll‚Äù card mirrors the command.

7.2 Highlights
	‚Ä¢	Weekly highlights card with top scorer, blowout, bench tragedy, comeback.
	‚Ä¢	Adds a ‚ÄúMeme this‚Äù button if autoMeme is on (random meme/GIF with guardrails).

7.3 Rivalries
	‚Ä¢	Rivalry canonicalization (case-insensitive team names).
	‚Ä¢	Embed shows H2H record; button ‚ÄúSet as featured rivalry‚Äù (pins to dashboard).

Acceptance
	‚Ä¢	Create poll in dashboard ‚Üí appears in Discord; auto-close works; result embed posts.
	‚Ä¢	Highlights job runs post-week; embed posted; no 429s.

‚∏ª

8) Slash commands: Minimum complete set
	‚Ä¢	/help ‚Äì lists key commands and links to dashboard.
	‚Ä¢	/rules question:<text> ‚Äì RAG search; ephemeral.
	‚Ä¢	/scoring question:<text> ‚Äì same, but scoped to scoring doc if separated.
	‚Ä¢	/digest ‚Äì on-demand digest in the configured channel.
	‚Ä¢	/poll ‚Äì quick poll creation.
	‚Ä¢	/whoami ‚Äì shows mapped team + role.
	‚Ä¢	/reindex ‚Äì starts reindex (ephemeral ‚Äústarted‚Äù).

Acceptance
	‚Ä¢	In Discord, all commands visible + respond without errors in your guild.

‚∏ª

9) Reliability: Discord/posting pipeline
	‚Ä¢	Wrap all Discord POSTs with:
	‚Ä¢	Idempotency key (X-Idempotency-Key locally tracked, or our own DB lock) to avoid dupes.
	‚Ä¢	429 handler with retry/backoff and max attempts.
	‚Ä¢	Centralized postMessage utility returns {ok, messageId, error}.
	‚Ä¢	Write events on success/failure for audit.

Acceptance
	‚Ä¢	Simulate a short burst (5 posts in 2s) ‚Üí all succeed with spacing, no rate-limit failures.

‚∏ª

10) Security tidy-up
	‚Ä¢	Session cookie flags: HttpOnly, Secure (prod), SameSite=Lax.
	‚Ä¢	CSRF token for browser POST to /api/v2/* (double-submit cookie or header token).
	‚Ä¢	Validate all inputs with a centralized validator (e.g., zod) returning {ok:false, code, message}.

Acceptance
	‚Ä¢	POST without CSRF ‚Üí 403; with token ‚Üí 200.

‚∏ª

11) Tests & scripts
	‚Ä¢	Add qa-polish.sh to exercise:
	‚Ä¢	Health, events
	‚Ä¢	Owners map
	‚Ä¢	Feature toggles
	‚Ä¢	Reminder creation
	‚Ä¢	Digest preview
	‚Ä¢	Update QA_RESULTS.md with outputs.

Acceptance

bash qa-polish.sh  # exits 0; prints ‚úî for each check


‚∏ª

12) Docs & help in-app
	‚Ä¢	Update /help embed with:
	‚Ä¢	Link to /setup and dashboard
	‚Ä¢	Short ‚ÄúWhat can I do?‚Äù list
	‚Ä¢	‚ÄúIf anything breaks, use /reindex or visit dashboard‚Äù
	‚Ä¢	Update replit.md with new endpoints, admin buttons, and known limits.

‚∏ª

Migrations (only if needed)
	‚Ä¢	If you need new storage (e.g., owner_links, reminders, leagues.channels JSON column), add a single idempotent migration:
	‚Ä¢	migrations/<next>__polish_baseline.sql
	‚Ä¢	Use IF NOT EXISTS for tables/indexes.
	‚Ä¢	Do not alter/drop existing prod objects.

‚∏ª

Final Acceptance (quick pass)
	‚Ä¢	/setup feels smooth; stepper never dead-ends.
	‚Ä¢	Dashboard shows toggles, channel routing, personality with live preview.
	‚Ä¢	Owner mapping complete; /whoami identifies user.
	‚Ä¢	Reminders run; digest preview & run-now work.
	‚Ä¢	/rules returns a useful answer with source.
	‚Ä¢	Poll ‚Üí Discord works end-to-end.
	‚Ä¢	No 429 spam, retries behave, posts are deduped.
	‚Ä¢	/api/health status ‚Äúok‚Äù.

‚∏ª

If you want, I can stick around and sanity-check your curl outputs or screenshots after Replit runs this. Once this sprint lands, you‚Äôll have a ship-worthy MVP that actually feels finished: the commissioner can set it up solo, the bot has a personality, and the day-to-day tasks are one click.