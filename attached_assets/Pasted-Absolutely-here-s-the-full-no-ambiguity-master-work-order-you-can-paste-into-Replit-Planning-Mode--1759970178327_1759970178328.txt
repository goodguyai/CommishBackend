Absolutely‚Äîhere‚Äôs the full, no-ambiguity master work order you can paste into Replit Planning Mode. It merges everything we‚Äôve covered (Phases 1‚Äì4 work, your logs, the repo audit, both external agent audits, and the new reliability gaps) and adds the DO NOT guardrails so nothing gets ‚Äúhelpfully‚Äù rewritten or broken.

Copy everything between the divider lines into Replit. It‚Äôs formatted the way the agent reads best: context ‚Üí hard guardrails ‚Üí change budget ‚Üí tasks ‚Üí acceptance ‚Üí verification ‚Üí backout.

‚∏ª

üß≠ THE COMMISH ‚Äî Pre-Phase-5 Reliability & Hygiene Master Work Order

Revision: Oct 8, 2025
Mode: Planning ‚Üí Build (feature branch)
Scope: Reliability & hygiene hardening prior to Phase 5 features
Source of truth: This work order. Do not infer beyond scope.

0) Context (Read Carefully)
	‚Ä¢	Phases 1‚Äì4 are in place:
	‚Ä¢	/doctor suite (status, discord, sleeper, database, cron, secrets)
	‚Ä¢	Wizard (Stages 1‚Äì3) with Supabase auth (req.supabaseUser fix), assignments bootstrap/commit
	‚Ä¢	Constitution Drafts (+ endpoints), Switchboard Automations, jobs ledger groundwork
	‚Ä¢	Live logs show healthy startup + schedulers running, but periodic job output is empty (‚ÄúPosted 0 queued content items‚Äù). That‚Äôs an observability + queue wiring issue, not a runtime crash.
	‚Ä¢	We must stabilize Discord ID handling, idempotency, error envelopes, and scheduler queue visibility before any further feature work.

‚∏ª

1) üö´ NON-NEGOTIABLE GUARDRAILS (DO NOT DO THESE)

Do NOT:
	1.	Add a global body parser that touches Discord /interactions raw body. (Ed25519 verification requires exact raw bytes.)
	2.	Change or remove existing routes or namespaces. New endpoints must live under /api/doctor/*, /api/v2/*, /api/v3/* only.
	3.	Delete or rename DB tables/columns. All migrations must be idempotent and backward-compatible.
	4.	Coerce Discord snowflakes (guild/channel/user IDs) to numbers. They must remain strings end-to-end. No Number(), parseInt(), unary +.
	5.	Log secrets or tokens. Mask; doctor endpoints are read-only and admin-key-gated in production.
	6.	Rewrite the installer wizard. Only touch items called out below.
	7.	Change .replit or process ports. Keep server on port 5000.
	8.	Refactor ‚Äúfor cleanliness.‚Äù Only change what‚Äôs specified. Minimal diff > ‚Äúnice refactor.‚Äù
	9.	Overwrite or bypass error envelope format. All errors must be { ok:false, code:"UPPER_SNAKE", message:"..." }.

‚∏ª

2) Change Budget (What You May Modify/Create)
	‚Ä¢	Create:
	‚Ä¢	server/services/* small utilities (rate limit, retry, idempotency) if not present
	‚Ä¢	server/services/jobs.ts (read-only queue diagnostics)
	‚Ä¢	server/services/announceGuard.ts (rate limit + idempotency wrappers)
	‚Ä¢	/api/doctor/cron/detail and /api/doctor/cleanup?dry=true routes (READ-ONLY)
	‚Ä¢	Edit (minimal & localized):
	‚Ä¢	Affected announcement send path to add idempotency + cooldown
	‚Ä¢	Sleeper sync ‚Üí constitution draft creation path to add hash dedupe
	‚Ä¢	Error responses to normalize envelope
	‚Ä¢	Log prefixes and duplicate ‚Äúenv passed‚Äù elimination
	‚Ä¢	Dashboard IA to 3 tiles (Today | This Week | Health); move heavy tiles to Switchboard/Constitution (no feature loss)
	‚Ä¢	DB: Add tables/columns only if missing; no destructive changes.

‚∏ª

3) Known Issues to Fix (Evidence-Driven)
	1.	Discord snowflake coercion ‚Üí crashes & 400s (we saw "YOUR_GUILD_ID"/number coercions in earlier runs).
	2.	Idempotency gaps ‚Üí double-posts & duplicate constitution drafts on identical Sleeper payloads.
	3.	Inconsistent error envelopes ‚Üí hard to debug (mixed shapes).
	4.	Scheduler ‚Äú0 queued‚Äù ‚Üí queue writer/reader silent or unseeded.
	5.	Duplicate startup logs ‚Üí ‚Äú‚úÖ Environment validation passed‚Äù appears twice; noisy.
	6.	Dashboard overload ‚Üí critical actions buried; we must de-clutter now (no feature loss).
	7.	Secrets drift risk ‚Üí VITE_SUPABASE_URL was mis-set to a JWT previously; keep parity checks.

‚∏ª

4) Tasks (Do in Order) ‚Äî with Acceptance Gates

TIER 1 ‚Äî CRITICAL RELIABILITY

Task 1 ‚Äî Discord Snowflake Audit & Fix
	‚Ä¢	Scan:
rg -n "(Number\\(.*Id|parseInt.*Id|\\+.*Id)" server client | grep -i "guild\\|channel\\|user" || echo "OK: none"
	‚Ä¢	Replace any numeric coercion with string-only handling. Validate input: if a non-snowflake sneaks in, return
400 { ok:false, code:"INVALID_SNOWFLAKE", message:"Discord ID must be a string snowflake" }.
	‚Ä¢	Acceptance: The scan returns no matches. /api/doctor/discord succeeds for real guild+channel.

Task 2 ‚Äî Idempotency Keys (Announcements + Drafts)
	‚Ä¢	Announcements: make posting idempotent via key
announce:${guildId}:${channelId}:${sha256(text + ":" + (mention||""))} persisted in bot_activity.key.
On duplicate in last 24h ‚Üí skip and return { ok:true, skipped:true }.
	‚Ä¢	Constitution drafts: compute settings_hash (stable JSON canonicalization + SHA256). If same league + same hash in last 24h ‚Üí don‚Äôt insert new draft; log { skipped:true, reason:"DRAFT_DUPLICATE" }.
	‚Ä¢	Acceptance: Back-to-back identical announcements ‚Üí second returns skipped:true with no double post. A repeated Sleeper sync with unchanged settings does not create a new draft.

Task 3 ‚Äî Error Envelope Normalization
	‚Ä¢	Normalize all error responses to { ok:false, code:"UPPER_SNAKE", message:"..." }.
	‚Ä¢	Audit: rg -n "res\\.status\\(\\d+\\)\\.json\\(" server | wc -l before/after (show the count), and show 3 spot checks.
	‚Ä¢	Acceptance: 5 forced error cases across /api/v2 + /api/v3 show normalized envelopes, incl. 429 { code:"COOLDOWN" }.

TIER 2 ‚Äî HYGIENE COMPLETION

Task 4 ‚Äî Log Cleanup & Prefixes
	‚Ä¢	Ensure only one startup line:
[Startup] Env OK ‚Ä¢ Discord ‚úì ‚Ä¢ DB ‚úì ‚Ä¢ Cron ‚úì ‚Ä¢ LLM ‚úì
	‚Ä¢	Prefix periodic logs: [Scheduler], health: [Doctor].
	‚Ä¢	Acceptance: One startup line per cold boot; no duplicate ‚Äúenv passed‚Äù.

Task 5 ‚Äî Doctor Enhancements (READ-ONLY)
	‚Ä¢	Add: /api/doctor/cron/detail ‚Üí { key, next, last, queued, last_error } for each job.
	‚Ä¢	Add: /api/doctor/cleanup?dry=true ‚Üí preview items pending cleanup; no writes in dry mode.
	‚Ä¢	Acceptance:
	‚Ä¢	curl $APP/api/doctor/cron/detail | jq returns non-empty jobs with timestamps.
	‚Ä¢	curl $APP/api/doctor/cleanup?dry=true | jq returns a list or empty; DB state unchanged.

Task 6 ‚Äî Content Poster Defaults (Seeding)
	‚Ä¢	For every existing league missing a content poster config, set:
leagues.jobs.contentPoster = { enabled:true, channelId:<existing default or league.discord_channel_id>, cron:"*/5 * * * *" }
	‚Ä¢	Idempotent seeder; prints what it changed.
	‚Ä¢	Acceptance: After seeding, /api/doctor/cron/detail shows content_poster scheduled with a valid channel. The next run logs a clear ‚Äúskip (no content)‚Äù or a post; never vague ‚Äú0 queued‚Äù without a reason.

Task 7 ‚Äî Dashboard IA Simplification (No feature loss)
	‚Ä¢	Dashboard shows only:
	‚Ä¢	Today (next deadlines/events today)
	‚Ä¢	This Week (upcoming digest/recap window)
	‚Ä¢	System Health (link out to /doctor + wizard step states)
	‚Ä¢	Move advanced tiles to Switchboard (automations, schedules) and Constitution (drafts/index health).
	‚Ä¢	Acceptance: Dashboard renders 3 tiles; displaced features work in their new tabs.

TIER 3 ‚Äî POLISH

Task 8 ‚Äî Announcement Rate Limiting (Per-channel cooldown)
	‚Ä¢	Add conservative per-channel cooldown (30s default). On cooldown, return 429 { ok:false, code:"COOLDOWN", message:"‚Ä¶" }.
	‚Ä¢	Acceptance: Two announce calls within 30s ‚Üí 429; third after 30s ‚Üí success.

Task 9 ‚Äî Schema Validation (Add if missing)
	‚Ä¢	Ensure jobs_run exists with timestamptz and indexes; ensure a place to store settings_hash (either in leagues or a new per-league settings snapshot table).
	‚Ä¢	Acceptance: DB introspection shows both; a Sleeper sync writes/updates settings_hash and participates in draft dedupe.

‚∏ª

5) Cross-Checks (Secrets & Env Parity)
	‚Ä¢	VITE_SUPABASE_URL must equal SUPABASE_URL (URL, not JWT).
	‚Ä¢	VITE_SUPABASE_ANON_KEY must be the public anon JWT.
	‚Ä¢	/api/doctor/secrets masks secrets, confirms presence; no values printed in logs.

‚∏ª

6) Verification Script (Paste Outputs in Report)

# Doctor health
curl -sS $APP_BASE_URL/api/doctor/status | jq
curl -sS $APP_BASE_URL/api/doctor/cron | jq
curl -sS $APP_BASE_URL/api/doctor/cron/detail | jq
curl -sS "$APP_BASE_URL/api/doctor/cleanup?dry=true" | jq

# Snowflake audit must be clean:
rg -n "(Number\\(.*Id|parseInt.*Id|\\+.*Id)" server client | grep -i "guild\\|channel\\|user" || echo "OK: no numeric coercions"

# Error envelope spot-checks (force 3 different error conditions)
# (1) Announce cooldown ‚Üí 429
curl -sS -XPOST $APP_BASE_URL/api/announce/send \
  -H "Content-Type: application/json" \
  -d '{"guildId":"<G>","channelId":"<C>","text":"rate-limit-test"}' | jq
curl -sS -XPOST $APP_BASE_URL/api/announce/send \
  -H "Content-Type: application/json" \
  -d '{"guildId":"<G>","channelId":"<C>","text":"rate-limit-test"}' | jq

# (2) Announce idempotency ‚Üí skipped:true
curl -sS -XPOST $APP_BASE_URL/api/announce/send \
  -H "Content-Type: application/json" \
  -d '{"guildId":"<G>","channelId":"<C>","text":"exact same body"}' | jq
curl -sS -XPOST $APP_BASE_URL/api/announce/send \
  -H "Content-Type: application/json" \
  -d '{"guildId":"<G>","channelId":"<C>","text":"exact same body"}' | jq

# (3) Draft dedupe (trigger two identical Sleeper syncs)
# Expect second call to report skipped duplicate; show /api/v3/constitution/drafts list count unchanged

# Dashboard check (manual): confirm only three tiles appear; advanced modules moved.


‚∏ª

7) Deliverables Checklist (What You Must Return)
	‚Ä¢	Branch: phase5-reliability with 9 commits (one per task).
	‚Ä¢	Report:
	1.	outputs of the Verification Script above
	2.	list of touched files (by path)
	3.	before/after count of res.status().json( occurrences
	4.	a one-paragraph ‚ÄúPhase 5 Reliability Complete‚Äù statement
	‚Ä¢	Assurances: Confirmation that no Discord raw-body signature code was touched and all new doctor endpoints are read-only & admin-key-gated in production.

‚∏ª

8) Backout Plan (In Case Something Regresses)
	‚Ä¢	All changes are additive, idempotent, and behind existing flows. If a regression occurs:
	‚Ä¢	Revert individual commit for the failing task (they‚Äôre isolated by design).
	‚Ä¢	Disable announcement cooldown by setting ANNOUNCE_COOLDOWN_SEC=0 (if a temporary unblock is needed).
	‚Ä¢	Disable content poster seeding by flipping the seeder feature flag off and re-running; it‚Äôs idempotent.
	‚Ä¢	Doctor endpoints are read-only; safe to keep.

‚∏ª

9) What Comes After (Phase 5 Summary You‚Äôll Queue Next)

Rename Phase 5 in notes to ‚ÄúReliability & Hygiene Hardening.‚Äù Observability is already present; this phase makes the behavior trustworthy:
	‚Ä¢	Snowflake correctness = fewer Discord 400/500s.
	‚Ä¢	Idempotency = no double posts, no duplicate drafts.
	‚Ä¢	Consistent errors = debuggable failures.
	‚Ä¢	Scheduler visibility = explainable ‚Äúwhy nothing posted.‚Äù
	‚Ä¢	Dashboard simplification = reduced cognitive load ‚Üí higher completion of setup.

Once this returns green, we immediately proceed to Phase 6: ‚ÄúLeague Persona & Engagement Automations‚Äù (welcome, /status, weekly recap scheduling, tasteful reactions) on top of this hardened base.

‚∏ª

Proceed exactly as written. If any acceptance gate fails, stop and report with the failing output‚Äîdo not patch creatively outside this scope.