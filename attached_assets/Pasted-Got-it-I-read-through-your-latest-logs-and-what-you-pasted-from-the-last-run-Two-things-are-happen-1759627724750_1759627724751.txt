Got it. I read through your latest logs and what you pasted from the last run. Two things are happening:
	1.	The OAuth redirect error is solved (you’re now using a bot-install URL with no redirect_uri).
	2.	Your setup submit is crashing:

POST /api/v2/setup/discord → 500  
PostgresError: invalid input syntax for type uuid: ""  (code 22P02)
where: portal parameter $1 = ''

That means we’re inserting/updating a row with a blank UUID (likely league_id or account_id) coming from the request or a default-less column.

Below is a deeper, end-to-end blueprint that fixes the immediate crash and gives you a durable, two-stage setup with hard “doctor” checks, route hygiene, and bulletproof E2E. I’m showing only the parts that matter so you can drop them in without hunting.

⸻

A) Immediate fix for the 22P02 crash

A1) Make POST /api/v2/setup/discord accept optional leagueId

If leagueId is not provided (or empty), create the league on the server with a generated UUID. Never trust the client to supply UUIDs.

// server/routes.setup-discord.ts
import type { Express } from 'express';
import { z } from 'zod';
import { storage } from '../storage';

const Body = z.object({
  guildId: z.string().min(1),
  channelId: z.string().min(1),
  leagueId: z.string().uuid().optional(),   // optional
});

export function registerDiscordSetup(app: Express) {
  app.post('/api/v2/setup/discord', async (req, res) => {
    const parse = Body.safeParse(req.body);
    if (!parse.success) return res.status(400).json({ ok:false, code:'BAD_INPUT', message: parse.error.message });

    const { guildId, channelId, leagueId } = parse.data;

    try {
      // 1) Ensure a league id exists (server-generated if missing)
      let finalLeagueId = leagueId;
      if (!finalLeagueId) {
        const row = await storage.sql/*sql*/`
          INSERT INTO leagues (id, name, channels, features)
          VALUES (gen_random_uuid(), 'My League', '{}'::jsonb, '{}'::jsonb)
          RETURNING id
        `;
        finalLeagueId = row[0].id as string;
      }

      // 2) Persist Discord mapping (jsonb merge keeps this idempotent)
      await storage.sql/*sql*/`
        UPDATE leagues SET
          channels = COALESCE(channels, '{}'::jsonb) ||
            jsonb_build_object('discord', jsonb_build_object(
              'guildId', ${guildId},
              'channelId', ${channelId}
            ))
        WHERE id = ${finalLeagueId}::uuid
      `;

      return res.json({ ok:true, leagueId: finalLeagueId });
    } catch (e:any) {
      console.error('[Discord Setup]', e);
      return res.status(500).json({ ok:false, code:'DISCORD_SETUP_FAILED', message:'Failed to configure Discord' });
    }
  });
}

Why this fixes your error
	•	If the client sends "" or undefined for leagueId, we create a league and return its UUID.
	•	We never pass an empty string to a uuid column again.

A2) DB safety: guarantee UUID defaults (idempotent migration)

-- scripts/2025_10_04_uuid_defaults.sql
CREATE EXTENSION IF NOT EXISTS pgcrypto;

ALTER TABLE leagues
  ALTER COLUMN id SET DEFAULT gen_random_uuid();

-- optional: make other uuid columns safe too, if you have them:
-- ALTER TABLE accounts ALTER COLUMN id SET DEFAULT gen_random_uuid();

(Keeping your earlier channels/personality/features jsonb columns—those are fine.)

A3) Frontend: stop sending empty league IDs
	•	When you submit the Discord setup form, send only what you actually have:

// client submit
const payload: any = { guildId, channelId };
if (leagueId) payload.leagueId = leagueId;   // include only if valid UUID
await api.post('/api/v2/setup/discord', payload);


	•	After success, store the returned leagueId in localStorage or app state so later steps (Sleeper, rules) reuse it.

⸻

B) Hardened two-stage flow (Discord → Sleeper) with “Doctor” gates

You already added parts of this. Here’s the full version tailored to what your logs show.

B1) Discord Doctor (stage gate)

// server/routes.doctor-discord.ts
import type { Express } from 'express';
import { getEnv } from '../env';
import { discordRest } from '../services/discord';

export function registerDiscordDoctor(app: Express) {
  app.get('/api/v2/doctor/discord', async (req, res) => {
    const out:any = { ok:true, checks:{} };

    // Redirect hygiene (for USER OAuth only—here just assert formatting)
    const redirect = `${getEnv().APP_BASE_URL}/discord-callback`;
    out.checks.redirect = {
      value: redirect,
      lowercase: redirect === redirect.toLowerCase(),
      suffixOk: redirect.endsWith('/discord-callback'),
    };
    if (!out.checks.redirect.lowercase || !out.checks.redirect.suffixOk) out.ok = false;

    // Bot can authenticate
    try {
      const me = await discordRest.get('/users/@me');
      out.checks.botUser = { ok:true, id: me.id };
    } catch (e) {
      out.ok = false; out.checks.botUser = { ok:false, err:String(e) };
    }

    res.set('Cache-Control','no-store').status(out.ok?200:409).json(out);
  });
}

B2) Channels with precise BOT_NOT_IN_GUILD

(You have this, but make it strict and structured.)

// server/routes.discord-channels.ts
import type { Express } from 'express';
import { discordRest } from '../services/discord';

export function registerDiscordChannels(app: Express) {
  app.get('/api/v2/discord/channels', async (req,res) => {
    const guildId = String(req.query.guildId || '');
    if (!guildId) return res.status(400).json({ error:'MISSING_GUILD_ID' });

    try {
      try {
        await discordRest.get(`/guilds/${guildId}`); // membership probe
      } catch {
        return res.status(409).json({ error:'BOT_NOT_IN_GUILD' });
      }
      const cs = await discordRest.get(`/guilds/${guildId}/channels`);
      const postable = (cs||[]).filter((c:any)=> ['0','5','15'].includes(String(c.type)));
      return res.json({ channels: postable });
    } catch (e:any) {
      return res.status(500).json({ error:'CHANNELS_FAILED', message:String(e) });
    }
  });
}

B3) Bot-Install URL (NO redirect_uri)

// server/routes.discord-install.ts
import type { Express } from 'express';
import { getEnv } from '../env';

export function registerDiscordInstall(app: Express) {
  app.get('/api/v2/discord/bot-install-url', (req,res) => {
    const guildId = String(req.query.guildId||'');
    if (!guildId) return res.status(400).json({ error:'MISSING_GUILD_ID' });

    const url = new URL('https://discord.com/api/oauth2/authorize');
    url.searchParams.set('client_id', getEnv().DISCORD_CLIENT_ID);
    url.searchParams.set('scope', 'bot applications.commands');
    url.searchParams.set('permissions', String(getEnv().DISCORD_BOT_PERMISSIONS));
    url.searchParams.set('guild_id', guildId);
    url.searchParams.set('disable_guild_select', 'true');

    res.json({ url: url.toString() });
  });
}

Env you must set: DISCORD_BOT_PERMISSIONS – copy the integer from the Bot page (matches your toggles: View Channels, Send Messages, Embed Links, Read History, Manage Messages, Add Reactions, Mention Everyone, Use Slash Commands, Create Polls).

⸻

C) Replit anti-stale & duplications

You already added trust-proxy + secure cookies. Complete the hygiene:

// server/index.ts – before user routes
if (process.env.NODE_ENV === 'production') {
  app.use((req,res,next) => {
    if (req.path.startsWith('/api/mock/')) return res.status(410).json({ error:'GONE' });
    next();
  });
}

// Admin-only route manifest and deep health
app.get('/api/_debug/routes', requireAdminKey, /* ...exact code to list stack... */);
app.get('/api/_debug/health', requireAdminKey, /* ...db, bot user, slash commands, session... */);

Use these to catch:
	•	duplicate legacy endpoints still mounted,
	•	stale vite bundles (you already kill HTML caching),
	•	command registration drift.

⸻

D) Frontend: robust Discord step

Key points
	•	When user selects a guild, call channels endpoint.
	•	If BOT_NOT_IN_GUILD ⇒ show big Install THE COMMISH button.
	•	Open in new tab, keep setup page open, and auto-retry on tab focus/visibility.
	•	On successful channel load, enable Continue.
	•	On submit, send only { guildId, channelId, leagueId? } (include leagueId only if it’s a real UUID).
	•	Use the server’s response { leagueId } for all subsequent steps.

(You already have most of this. The difference is “don’t submit empty leagueId” + rely on server to generate one.)

⸻

E) Tests that stop regressions (Playwright)

Add/extend these:

// qa/tests/10_discord_doctor.spec.ts
test('Doctor is green or pinpoints fix', async ({ request }) => {
  const r = await request.get('/api/v2/doctor/discord');
  expect([200,409]).toContain(r.status());
  const body = await r.json();
  // if 409, expect meaningful checks
  if (r.status() === 409) expect(body.checks).toBeTruthy();
});

// qa/tests/11_channels_install_gap.spec.ts
test('If bot not in guild, UI offers Install and auto-retries', async ({ page }) => {
  await page.goto('/setup');
  await page.getByTestId('discord-guild-select').click();
  await page.getByRole('option', { name: /your guild/i }).click();

  // Either channels appear, or install button shows
  const installBtn = page.getByTestId('install-bot-button');
  const chanSelect = page.getByTestId('discord-channel-select');
  await expect(installBtn.or(chanSelect)).toBeVisible();
});

// qa/tests/12_setup_submit.spec.ts
test('POST /setup/discord creates leagueId when missing', async ({ request }) => {
  const r = await request.post('/api/v2/setup/discord', {
    data: { guildId: '123', channelId: '456' } // no leagueId on purpose
  });
  expect(r.ok()).toBeTruthy();
  const j = await r.json();
  expect(j.ok).toBeTruthy();
  expect(j.leagueId).toMatch(/[0-9a-f-]{36}/i);
});

These three cover: doctor gate, install gap UX, and 22P02 regression.

⸻

F) One-button “sweep” you can run before any user tries

# scripts/sweep.sh
set -euo pipefail
BASE="${APP_BASE_URL:?}"
ADMIN="${ADMIN_KEY:?}"

echo 'Routes:'; curl -s -H "X-Admin-Key: $ADMIN" "$BASE/api/_debug/routes" | jq 'length'
echo 'Health:'; curl -s -H "X-Admin-Key: $ADMIN" "$BASE/api/_debug/health" | jq .
echo 'Discord doctor:'; curl -s "$BASE/api/v2/doctor/discord" | jq .
echo 'Sleeper doctor:'; curl -s "$BASE/api/v2/doctor/sleeper" | jq .
echo 'Bot install URL (sample):'; curl -s "$BASE/api/v2/discord/bot-install-url?guildId=123" | jq -r .url


⸻

Summary of what changed vs my previous message
	•	Fixed the crashing endpoint by treating leagueId as optional and creating the league server-side (prevents ''::uuid).
	•	Added UUID defaults in DB so inserts never need client-provided UUIDs.
	•	Tightened doctor + channels endpoints with structured results and explicit BOT_NOT_IN_GUILD.
	•	Re-affirmed no-redirect bot install and required DISCORD_BOT_PERMISSIONS.
	•	Concrete Playwright tests that catch this exact 22P02 class of bug and the install gap.
	•	Sweep script you can run to validate the entire stack in seconds.

If you paste these in (A→F) and run the sweep + tests, the flow becomes two stages, zero guessing:
	1.	Discord: connect → (install if needed) → channels → submit (creates league if missing).
	2.	Sleeper: connect → pick league → done.

No more blank UUIDs, no more redirect surprises, and Replit won’t quietly ship duplicate/legacy code because the route/health checks will call it out immediately.