You‚Äôre on the right track with those permissions. Here‚Äôs how to turn the ‚ÄúInvalid OAuth2 redirect_uri‚Äù mess into a clean, repeatable install flow and set us up for your ‚Äúselective reactions / @everyone‚Äù goals.

‚∏ª

1) Permissions: what you picked & why it‚Äôs fine

You enabled:
	‚Ä¢	View Channels
	‚Ä¢	Read Message History
	‚Ä¢	Send Messages
	‚Ä¢	Manage Messages
	‚Ä¢	Embed Links
	‚Ä¢	Use Slash Commands
	‚Ä¢	Create Polls
	‚Ä¢	Add Reactions
	‚Ä¢	Mention Everyone

‚úÖ This is totally workable for THE COMMISH.
Notes:
	‚Ä¢	Add Reactions + Read Message History are exactly what we need for selective üëç/‚ù§Ô∏è reactions.
	‚Ä¢	Mention Everyone: keep it on in Discord, but we‚Äôll gate its usage in the app (commissioner-only + rate-limited) so we never spam.
	‚Ä¢	We are not using Administrator, which is good (principle of least privilege).

Action (once per change): in the Discord dev portal ‚ÄúBot‚Äù page, scroll to the bottom and copy the Permissions Integer shown there. We‚Äôll feed that into our install URL.

‚∏ª

2) Fix the install flow (this is the redirect error culprit)

Discord settings (one time)
	‚Ä¢	Bot ‚Üí Authorization Flow
	‚Ä¢	Public Bot: ON
	‚Ä¢	Requires OAuth2 Code Grant: OFF
	‚Ä¢	OAuth2 ‚Üí Redirects (user login only):
https://thecommish.replit.app/discord-callback (lowercase, no trailing slash)

The ‚ÄúInvalid OAuth2 redirect_uri‚Äù happened because the bot install URL included a redirect_uri. The classic ‚ÄúAdd to server‚Äù flow does not use redirect_uri. We remove it entirely.

Backend: generate a redirect-free bot install URL

Update /api/v2/discord/bot-install-url to omit redirect_uri and include permissions + target guild:

// server/routes.ts (or wherever you build it)
app.get('/api/v2/discord/bot-install-url', (req, res) => {
  const { guildId } = req.query as { guildId: string };
  const clientId = getEnv().DISCORD_CLIENT_ID;
  const perms = getEnv().DISCORD_BOT_PERMISSIONS; // set this env from Discord portal integer

  if (!guildId) return res.status(400).json({ error: 'MISSING_GUILD_ID' });

  const url = new URL('https://discord.com/api/oauth2/authorize');
  url.searchParams.set('client_id', clientId);
  url.searchParams.set('scope', 'bot applications.commands');
  url.searchParams.set('permissions', String(perms));
  url.searchParams.set('guild_id', guildId);
  url.searchParams.set('disable_guild_select', 'true');

  // IMPORTANT: no redirect_uri, no response_type here.
  res.json({ url: url.toString() });
});

Frontend: open install in a new tab + auto-retry channel fetch

You already added most of this. Keep/ensure:
	‚Ä¢	Before opening the install link:
sessionStorage.setItem('pending-guild-id', selectedGuildId)
	‚Ä¢	Open in new tab: window.open(installUrl, '_blank', 'noopener,noreferrer')
	‚Ä¢	On focus / visibilitychange, silently retry fetchChannels(selectedGuildId); if the bot joined, the channels will appear.

‚∏ª

3) Environment & base URL sanity (prevents random prod bugs)
	‚Ä¢	APP_BASE_URL=https://thecommish.replit.app (lowercase, no trailing slash)
	‚Ä¢	DISCORD_BOT_PERMISSIONS=<integer from ‚ÄúBot‚Äù page>
	‚Ä¢	Keep session settings you already fixed:
	‚Ä¢	app.set('trust proxy', 1); cookie { secure: true, sameSite: 'lax', httpOnly: true }
	‚Ä¢	Fetch uses credentials: 'include' (done)
	‚Ä¢	HTML responses send Cache-Control: no-store (done)

‚∏ª

4) Acceptance test (fast)
	1.	Go to /setup ‚Üí Connect Discord ‚Üí ‚ÄúConnect Discord Account‚Äù ‚Üí approve.
	2.	Pick your server.
	‚Ä¢	If bot absent ‚Üí yellow box + ‚ÄúInstall THE COMMISH‚Äù button appears.
	3.	Click Install ‚Üí Discord tab opens ‚Üí authorize.
	4.	Return to the app tab ‚Üí it auto-retries ‚Üí channels load.
	5.	Pick a channel ‚Üí Continue.

If anything odd:
	‚Ä¢	curl -H "X-Admin-Key: $ADMIN_KEY" https://thecommish.replit.app/api/_debug/discord
‚Üí should show a session with user token + ~3 guilds
	‚Ä¢	curl "https://thecommish.replit.app/api/v2/discord/channels?guildId=<id>"
‚Üí returns channels array when bot is installed; returns { code: 'BOT_NOT_IN_GUILD' } otherwise

‚∏ª

5) Make reactions & @everyone smart (so it feels ‚Äúalive‚Äù, not spammy)

We‚Äôll add commissioner-tunable rules so the bot reacts sparingly and never abuses mentions.

League settings (DB / JSON column):

{
  "engagement": {
    "autoReact": {
      "enabled": true,
      "cooldownMinutes": 120,
      "minChars": 30,
      "sentiment": {
        "positiveThreshold": 0.6,
        "negativeThreshold": -0.4
      },
      "signals": {
        "highEffort": true,   // long, formatted, attachments
        "celebration": true,  // ‚Äúgg‚Äù, ‚Äúlet‚Äôs go‚Äù, team wins
        "support": true       // replies when someone gets bad luck/injury
      }
    },
    "mentions": {
      "allowEveryone": true,
      "commissionerOnly": true,
      "cooldownHours": 24,
      "contexts": ["league_announcement","deadline_reminder"]
    }
  }
}

Guardrails in code (high level):
	‚Ä¢	Keep a per-channel cooldown cache for reactions and @everyone.
	‚Ä¢	Only react if:
	‚Ä¢	message length ‚â• minChars or matches a ‚Äúsignal‚Äù pattern
	‚Ä¢	last bot reaction in channel > cooldownMinutes
	‚Ä¢	sentiment ‚â• threshold (positive) or ‚â§ negative for sympathy reactions
	‚Ä¢	Only allow @everyone when:
	‚Ä¢	request came from commissioner (check mapping/role we already store)
	‚Ä¢	last @everyone in guild > cooldownHours
	‚Ä¢	context is whitelisted (digest, deadlines, league-wide announcements)

This gives you your ‚Äúselective thumbs-up/heart‚Äù behavior and safe @everyone use.

‚∏ª

6) Where duplicate / legacy bits usually hide (quick cleanup pass)
	‚Ä¢	Only one session shape: req.session.discord (you already normalized)
	‚Ä¢	Delete/ignore any old endpoints under /api/mock/* in production
	‚Ä¢	Confirm one OAuth callback: /discord-callback (user OAuth only)
	‚Ä¢	Confirm one bot-install builder (the one above) and that no other path adds a redirect_uri to the bot install URL.
	‚Ä¢	Ensure lowercase base URL is used anywhere we build Discord URLs.

‚∏ª

7) Your next 3 clicks
	1.	In Discord dev portal ‚Üí Bot page ‚Üí copy Permissions Integer and put it into DISCORD_BOT_PERMISSIONS env in Replit.
	2.	In OAuth2 ‚Üí Redirects, verify only:
https://thecommish.replit.app/discord-callback
	3.	Try the flow again in /setup. If you ever see the yellow banner, click Install ‚Üí return ‚Üí channels should auto-populate.

‚∏ª

If you want me to, I can produce the exact diff for server/routes.ts and the small React changes you can paste as-is. But if you follow the steps above (especially removing redirect_uri from the bot-add URL and setting the permissions integer), the error you‚Äôre seeing will disappear, channels will load, and we can move on to polishing the ‚Äúfeel alive‚Äù bits (reactions, digests, polls) with the guardrails above.