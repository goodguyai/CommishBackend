awesome‚Äîmomentum is real. since Phase 1 shipped in your log (owner mapping, reminders, UI blocks, smoke tests), here‚Äôs the next copy-paste work order to drop into Replit. it keeps your guardrails and pushes Phase 2 (dispute prevention & vibes) + Phase 3 (engagement engine). I‚Äôve written it so the agent can run top-to-bottom with minimal back-and-forth.

‚∏ª

üö¶ PRIME REMINDER (do not edit)
	‚Ä¢	Supabase only (migrations via SQL files).
	‚Ä¢	Keep /api/* JSON-only; don‚Äôt touch Vite‚Äôs /api guards.
	‚Ä¢	Keep Discord /api/discord/interactions raw-body signature verification.
	‚Ä¢	Use env service only (no new process.env reads).
	‚Ä¢	Preserve v1 routes; add v2 when needed.
	‚Ä¢	Feature-flag all new behavior (default OFF unless stated).
	‚Ä¢	Commit in vertical slices: migration ‚Üí service ‚Üí endpoints ‚Üí UI ‚Üí tests ‚Üí smoke.

‚∏ª

üß≠ EXECUTION ORDER (this session)

0) Re-read Phase 1 artifacts
Do not remove: Reminder packs, Owner mapping, Events logging, QA script, /api/v2 aliases.

1) Phase 2 ‚Äì Dispute Prevention & Vibes Monitor
A. migrations
B. services
C. endpoints
D. Discord behaviors
E. dashboard UI
F. tests + smoke

2) Phase 3 ‚Äì Engagement Engine (Highlights + Creative modes)
A. migrations
B. services
C. endpoints
D. schedulers
E. Discord posting rules
F. dashboard UI
G. tests + smoke

3) Update docs (replit.md, QA_RESULTS.md append), post change summary.

If any new regression appears in /api/leagues/*, /api/polls, /api/health, STOP and fix before proceeding.

‚∏ª

1) PHASE 2 ‚Äî Dispute Prevention & Vibes Monitor

1A. Migrations (idempotent SQL; add migrations/0006_phase2_disputes_vibes.sql)

BEGIN;

-- sentiment logs per message (avoid storing raw body long-term)
CREATE TABLE IF NOT EXISTS sentiment_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL,
  channel_id TEXT NOT NULL,
  message_id TEXT NOT NULL,
  author_id TEXT NOT NULL,
  summary TEXT,                 -- tiny abstract of message
  toxicity_score NUMERIC(4,3),  -- 0..1
  sentiment_score NUMERIC(4,3), -- -1..1
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_sentiment_league_time ON sentiment_logs(league_id, created_at DESC);

-- moderation actions & freeze windows
CREATE TABLE IF NOT EXISTS mod_actions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL,
  actor TEXT NOT NULL,          -- bot|commissioner:<discordId>
  action TEXT NOT NULL,         -- 'freeze_thread'|'unfreeze'|'clarify_rule'|...
  target_channel_id TEXT,
  target_message_id TEXT,
  reason TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- disputes / trade reviews
CREATE TYPE IF NOT EXISTS dispute_status AS ENUM ('open','under_review','resolved','dismissed');
CREATE TABLE IF NOT EXISTS disputes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL,
  kind TEXT NOT NULL,           -- 'trade'|'rule'|'behavior'
  subject_id TEXT,              -- tradeId or rule section
  opened_by TEXT NOT NULL,      -- discord user id
  status dispute_status NOT NULL DEFAULT 'open',
  details JSONB,                -- payload
  resolution JSONB,             -- final notes
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  resolved_at TIMESTAMPTZ
);
CREATE INDEX IF NOT EXISTS idx_disputes_league_status ON disputes(league_id, status);

-- trade evaluations (snapshot to prevent drama)
CREATE TABLE IF NOT EXISTS trade_evaluations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL,
  trade_id TEXT NOT NULL,
  fairness_score NUMERIC(5,2),  -- 0..100
  rationale TEXT,
  inputs JSONB,                 -- projections, roster needs, league norms
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE UNIQUE INDEX IF NOT EXISTS uniq_trade_eval ON trade_evaluations(league_id, trade_id);

-- feature flags ensure OFF by default
ALTER TABLE leagues
  ADD COLUMN IF NOT EXISTS feature_flags JSONB DEFAULT '{}'::jsonb;

COMMIT;

1B. Services (new files)
	‚Ä¢	server/services/vibes.ts
	‚Ä¢	scoreMessage({leagueId, channelId, messageId, authorId, text}) -> {toxicity, sentiment, summary}
	‚Ä¢	store in sentiment_logs (truncate text ‚Üí summary only).
	‚Ä¢	server/services/moderation.ts
	‚Ä¢	freezeThread({leagueId, channelId, minutes, reason}) -> actionId
	‚Ä¢	clarifyRule({leagueId, channelId, ruleQuery}) -> messageId (uses rules/RAG search).
	‚Ä¢	server/services/tradeFairness.ts
	‚Ä¢	evaluateTrade({leagueId, tradeId, proposal}) -> {score, rationale, inputs} and persist to trade_evaluations.

Reuse existing Sleeper adapter for roster/projection inputs. Clamp outbound Discord embeds to 4096 chars. Add jittered retry on Discord calls.

1C. Endpoints
	‚Ä¢	POST /api/v2/vibes/score (admin or commissioner)
	‚Ä¢	body: { leagueId, channelId, messageId, authorId, text }
	‚Ä¢	returns { toxicity, sentiment }, writes sentiment_logs.
	‚Ä¢	POST /api/v2/mod/freeze (commissioner)
	‚Ä¢	body: { leagueId, channelId, minutes, reason } ‚Üí returns { ok:true, actionId }
	‚Ä¢	POST /api/v2/mod/clarify-rule (commissioner)
	‚Ä¢	body: { leagueId, channelId, question } ‚Üí posts citation; returns { ok:true, messageId }
	‚Ä¢	POST /api/v2/disputes
	‚Ä¢	body: { leagueId, kind, subjectId?, details } ‚Üí returns dispute
	‚Ä¢	PATCH /api/v2/disputes/:id
	‚Ä¢	body: { status, resolution? } ‚Üí returns updated dispute
	‚Ä¢	POST /api/v2/trades/evaluate
	‚Ä¢	body: { leagueId, tradeId, proposal } ‚Üí { fairness: %, rationale } and persists.

All must:
	‚Ä¢	validate input (zod)
	‚Ä¢	enforce commissioner role or X-Admin-Key for admin
	‚Ä¢	emit events rows: vibes_scored, thread_frozen, rule_clarified, dispute_opened, dispute_resolved, trade_evaluated.

1D. Discord behaviors
	‚Ä¢	When toxicity_score >= threshold (feature flag vibesMonitor), DM commissioner:
‚ÄúThis thread‚Äôs heating up (score: 0.79). Want me to freeze 10m or post rule?‚Äù
	‚Ä¢	Slash commands for commissioners:
	‚Ä¢	/freeze minutes:<int> reason:<text>
	‚Ä¢	/clarify question:<text>
	‚Ä¢	/trade_fairness id:<tradeId>
	‚Ä¢	Respect guild scoping; ephemeral success messages.

1E. Dashboard UI (cards in /dashboard)
	‚Ä¢	Vibes Monitor (flag toggle, threshold slider 0.6‚Äì0.9, ‚ÄúDM me on spikes‚Äù checkbox).
	‚Ä¢	Disputes list (open/under_review/resolved; open modal to resolve with resolution notes).
	‚Ä¢	Trade Fairness Snapshot (search tradeId ‚Üí score & rationale history).
	‚Ä¢	Moderation Tools (Freeze thread form, Clarify rule input).

1F. Tests + Smoke
	‚Ä¢	Unit tests for scoreMessage, freezeThread, evaluateTrade with fixtures.
	‚Ä¢	Add to qa-smoke.sh:

echo "P2-1 score"; curl -s -X POST $B/api/v2/vibes/score -H 'Content-Type: application/json' -H "X-Admin-Key: $ADMIN_KEY" -d '{"leagueId":"not-a-uuid","channelId":"c","messageId":"m","authorId":"u","text":"test"}' | jq '.error|.code? // "ok"'
echo "P2-2 dispute"; curl -s -X POST $B/api/v2/disputes -H 'Content-Type: application/json' -d '{"leagueId":"not-a-uuid","kind":"trade","details":{}}' | jq '.error|.code? // "ok"'



‚∏ª

2) PHASE 3 ‚Äî Engagement Engine (Highlights + Creative)

2A. Migrations (migrations/0007_phase3_engagement.sql)

BEGIN;

-- weekly highlights / moments
CREATE TABLE IF NOT EXISTS highlights (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL,
  week INT NOT NULL,
  kind TEXT NOT NULL,       -- 'comeback'|'blowout'|'bench_tragedy'|'top_scorer'
  payload JSONB NOT NULL,   -- computed facts
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_highlights_league_week ON highlights(league_id, week);

-- rivalries tracking
CREATE TABLE IF NOT EXISTS rivalries (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL,
  team_a TEXT NOT NULL,
  team_b TEXT NOT NULL,
  a_wins INT NOT NULL DEFAULT 0,
  b_wins INT NOT NULL DEFAULT 0,
  last_meeting_week INT,
  meta JSONB,
  UNIQUE(league_id, team_a, team_b)
);

-- content queue for scheduled posts to Discord
CREATE TYPE IF NOT EXISTS content_status AS ENUM ('queued','posted','skipped');
CREATE TABLE IF NOT EXISTS content_queue (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL,
  channel_id TEXT NOT NULL,
  scheduled_at TIMESTAMPTZ NOT NULL,
  template TEXT NOT NULL,   -- 'digest'|'highlight'|'meme'|'rivalry'
  payload JSONB NOT NULL,
  status content_status NOT NULL DEFAULT 'queued',
  posted_message_id TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_content_scheduled ON content_queue(league_id, scheduled_at, status);

COMMIT;

2B. Services
	‚Ä¢	server/services/highlights.ts
	‚Ä¢	computeWeekHighlights({leagueId, week}) -> Highlight[] (comeback prob swings, blowouts, bench points).
	‚Ä¢	Save to highlights.
	‚Ä¢	server/services/rivalries.ts
	‚Ä¢	updateHeadToHead({leagueId, week}) -> bumps a_wins/b_wins.
	‚Ä¢	getRivalryCard({leagueId, teamA, teamB}).
	‚Ä¢	server/services/content.ts
	‚Ä¢	enqueue({leagueId, channelId, scheduledAt, template, payload}).
	‚Ä¢	postQueued(now) ‚Üí posts Discord embeds respecting rate limits; updates status.

2C. Endpoints
	‚Ä¢	POST /api/v2/highlights/compute { leagueId, week? } ‚Üí computes + stores then returns summary.
	‚Ä¢	GET  /api/v2/highlights?leagueId=&week= ‚Üí list.
	‚Ä¢	POST /api/v2/rivalries/update { leagueId, week? }.
	‚Ä¢	POST /api/v2/content/enqueue { leagueId, channelId, scheduledAt, template, payload }.
	‚Ä¢	POST /api/v2/content/run (admin key) ‚Üí run poster once (for CRON-like).

2D. Scheduler
	‚Ä¢	Extend existing scheduler to:
	‚Ä¢	Sun night: enqueue digest + highlights.
	‚Ä¢	Mon AM: enqueue rivalry card if applicable.
	‚Ä¢	Optional: meme mode (if flag creativeTrashTalk ON and blowout > threshold), enqueue meme card (SFW filtered).

2E. Discord posting rules
	‚Ä¢	Clamp embed length; use concise title + fields.
	‚Ä¢	If botPersonality != neutral, wrap summaries in persona tone (Batman/Yoda/Sassy); keep facts intact.

2F. Dashboard UI
	‚Ä¢	‚ÄúHighlights‚Äù tab with Week picker, renders computed moments.
	‚Ä¢	‚ÄúRivalries‚Äù mini-dashboard (top rivalries, last result, rubber-match badge).
	‚Ä¢	‚ÄúContent Queue‚Äù admin table (queued/posted, re-enqueue button).
	‚Ä¢	Feature toggles: creativeTrashTalk, deepStats.

2G. Tests + Smoke

echo "P3-1 highlights"; curl -s -X POST $B/api/v2/highlights/compute -H 'Content-Type: application/json' -d '{"leagueId":"not-a-uuid","week":4}' | jq '.error|.code? // "ok"'
echo "P3-2 queue"; curl -s -X POST $B/api/v2/content/enqueue -H 'Content-Type: application/json' -d '{"leagueId":"not-a-uuid","channelId":"c","scheduledAt":"2030-01-01T00:00:00Z","template":"highlight","payload":{}}' | jq '.error|.code? // "ok"'


‚∏ª

3) Definition of Done (Phase 2 + 3)
	‚Ä¢	‚úÖ New migrations applied & idempotent.
	‚Ä¢	‚úÖ Services implemented with types & retries on Discord.
	‚Ä¢	‚úÖ Endpoints added (v2), validated, JSON only, error envelope on failures.
	‚Ä¢	‚úÖ Scheduler enqueues + poster works behind feature flags.
	‚Ä¢	‚úÖ Dashboard exposes toggles + screens (Vibes, Disputes, Highlights, Queue).
	‚Ä¢	‚úÖ Updated qa-smoke.sh & appended QA_RESULTS.md with outputs.
	‚Ä¢	‚úÖ replit.md change log & usage notes.
	‚Ä¢	‚úÖ No regression in /api/health, /api/events, /api/leagues/:id, /api/polls.

‚∏ª

4) Guardrail checks before you run
	‚Ä¢	Don‚Äôt touch the working /api/v1 routes; add only /api/v2.
	‚Ä¢	Keep no-store header on all /api/*.
	‚Ä¢	All new records must emit an events row (keeps Activity feed alive).
	‚Ä¢	If Sleeper API rate-limits, backoff & log; do not crash scheduler.

‚∏ª

5) one-liners to paste after Agent says ‚Äúdone‚Äù (quick verification)

B=https://thecommish.replit.app

# Phase 2 spot checks
curl -s -X POST $B/api/v2/vibes/score -H 'Content-Type: application/json' -H "X-Admin-Key: $ADMIN_KEY" \
  -d '{"leagueId":"not-a-uuid","channelId":"x","messageId":"y","authorId":"z","text":"you stink"}' | jq '.error|.code? // "ok"'

curl -s -X POST $B/api/v2/disputes -H 'Content-Type: application/json' \
  -d '{"leagueId":"not-a-uuid","kind":"trade","details":{"note":"test"}}' | jq '.error|.code? // "ok"'

# Phase 3 spot checks
curl -s -X POST $B/api/v2/highlights/compute -H 'Content-Type: application/json' \
  -d '{"leagueId":"not-a-uuid","week":4}' | jq '.error|.code? // "ok"'

curl -s -X POST $B/api/v2/content/enqueue -H 'Content-Type: application/json' \
  -d '{"leagueId":"not-a-uuid","channelId":"general","scheduledAt":"2030-01-01T00:00:00Z","template":"highlight","payload":{"foo":"bar"}}' | jq '.error|.code? // "ok"'


‚∏ª

Why this order?
	‚Ä¢	you already nailed Phase 1 plumbing; Phase 2 shores up peace-of-mind (the main commissioner pain), and Phase 3 adds the delight (highlights, rivalry fuel). both are fully flag-able so you can roll out safely.

if you paste the whole thing into Replit as ‚Äúnext sprint brief‚Äù, it‚Äôll know exactly what to build, how to test it, and what not to break. If you want, I can generate ready-to-commit TypeScript stubs for the new services/endpoints next so the agent just fills in logic.