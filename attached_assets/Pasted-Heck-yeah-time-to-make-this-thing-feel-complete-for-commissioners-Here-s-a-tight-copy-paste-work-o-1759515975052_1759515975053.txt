Heck yeah‚Äîtime to make this thing feel complete for commissioners. Here‚Äôs a tight, copy-paste work order for Replit that keeps all guardrails intact and moves the needle on real quality-of-life: dashboard controls, owner mapping UI, reminders, RAG polish, engagement UI, and QA. It‚Äôs sequenced, specific, and comes with acceptance checks.

‚∏ª

üöÄ ‚ÄúFeel Complete‚Äù Sprint ‚Äî Commissioner QoL & UX Polish

0) Guardrails (do not change)
	‚Ä¢	APP_BASE_URL = https://thecommish.replit.app (no trailing slash).
	‚Ä¢	DB = Supabase only. No Neon/Replit DB. Migrations only for schema changes; idempotent (IF NOT EXISTS) and no destructive alters.
	‚Ä¢	env service only (no new process.env reads in routes/services).
	‚Ä¢	Keep /api/discord/interactions on express.raw + Ed25519 verification.
	‚Ä¢	Keep server/vite.ts /api/* guards intact; don‚Äôt introduce new app.use("*") that can swallow /api.
	‚Ä¢	Prefer /api/v2/ for new endpoints.

‚∏ª

1) Quick wins: API freshness & logs (if not already shipped)
	1.	Add no-cache headers to all /api/* responses.
	2.	Add request ID + timing logs ([req-abc123] GET /api/... 200 42ms).

Accept

curl -I "$APP_BASE_URL/api/health" | grep -i cache-control
curl -s "$APP_BASE_URL/api/health" | jq '.status'   # "ok"


‚∏ª

2) Commissioner Dashboard ‚Äî control center

Goal: A single place to toggle features, pick channels, set personality, and run a digest.

2.1 Feature toggles (persisted)
	‚Ä¢	UI: card ‚ÄúLeague Features‚Äù with switches:
	‚Ä¢	autoMeme, digestEnabled, highlights, rivalries, creativeTrashTalk, deepStats.
	‚Ä¢	Backend:
	‚Ä¢	GET /api/v2/leagues/:leagueId ‚Üí returns featureFlags.
	‚Ä¢	PATCH /api/v2/leagues/:leagueId body: { featureFlags: {...} } (merge & persist).

2.2 Channel routing
	‚Ä¢	UI: ‚ÄúWhere should things post?‚Äù with dropdowns per feature:
	‚Ä¢	digests, reminders, polls, highlights.
	‚Ä¢	Persist JSON object leagues.channels.{featureKey} = channelId.
	‚Ä¢	Backend:
	‚Ä¢	Extend same PATCH to accept { channels: { digests, reminders, polls, highlights } }.
	‚Ä¢	GET /api/v2/discord/channels?guildId= ‚Üí list of name/id bot-writable channels.

2.3 Bot personality + live preview
	‚Ä¢	UI: radio group Neutral / Sassy / Formal / Meme-y / Custom.
	‚Ä¢	Live preview box: transforms a sample line (server-side).
	‚Ä¢	Backend:
	‚Ä¢	GET /api/v2/personality/preview?style=...&text=... ‚Üí { preview }
	‚Ä¢	Persist leagues.personality = { style, customTemplate? }.

2.4 Digest controls
	‚Ä¢	UI:
	‚Ä¢	‚ÄúNext scheduled digest: ‚Äù
	‚Ä¢	Buttons: Preview digest (modal JSON/text card) & Run digest now (posts to Discord).
	‚Ä¢	Backend (admin-key guarded):
	‚Ä¢	POST /api/v2/digest/preview?leagueId=...
	‚Ä¢	POST /api/v2/digest/run?leagueId=...

Accept

# toggles
curl -s "$APP_BASE_URL/api/v2/leagues/<LEAGUE_ID>" | jq '.featureFlags'
curl -s -X PATCH "$APP_BASE_URL/api/v2/leagues/<LEAGUE_ID>" \
  -H "Content-Type: application/json" \
  -d '{"featureFlags":{"digestEnabled":true}}' | jq '.ok'

# digest
curl -s -X POST "$APP_BASE_URL/api/v2/digest/preview?leagueId=<LEAGUE_ID>" -H "X-Admin-Key: $ADMIN_KEY" | jq '.summary'


‚∏ª

3) Owner Mapping UI ‚Äî Discord user ‚Üî team

Goal: Mentions & personalization that actually tag the right people.

3.1 Backend
	‚Ä¢	GET /api/v2/owners?leagueId=... ‚Üí array of { teamId, teamName, discordUserId? }.
	‚Ä¢	POST /api/v2/owners/map body { leagueId, teamId, discordUserId } ‚Üí upsert.
	‚Ä¢	Storage: if not already present, add idempotent migration for owner_links table (or reuse members with a dedicated unique index). No destructive changes.

3.2 Frontend
	‚Ä¢	Dashboard card: left column League Teams, right column Discord Users.
	‚Ä¢	Simple select per team (MVP) with typeahead for @users.
	‚Ä¢	Warning banner if any teams unmapped.

Accept

curl -s "$APP_BASE_URL/api/v2/owners?leagueId=<LEAGUE_ID>" | jq '.[0]'
curl -s -X POST "$APP_BASE_URL/api/v2/owners/map" \
  -H "Content-Type: application/json" \
  -d '{"leagueId":"<LEAGUE_ID>","teamId":"<TEAM_ID>","discordUserId":"<DISCORD_ID>"}' | jq '.ok'


‚∏ª

4) Reminders & schedules ‚Äî real QoL

Goal: Commissioners flip a switch; league gets timely nudges.

4.1 Presets (server-side defaults)
	‚Ä¢	Lineup locks (Sat & Sun mornings + 60/30 min pre-kick).
	‚Ä¢	Waivers (Tue night & Wed morning).
	‚Ä¢	Trade deadline countdown (daily last week).
	‚Ä¢	Persist structure: leagues.reminders = { presetKeys:[], custom:[] }.

4.2 Custom reminders
	‚Ä¢	UI: ‚ÄúCreate reminder‚Äù form (text + channel + schedule).
	‚Ä¢	Backend:
	‚Ä¢	POST /api/v2/reminders body { leagueId, channelId, text, cron | isoSchedule } ‚Üí stores to reminders table.
	‚Ä¢	GET /api/v2/reminders?leagueId=... ‚Üí list.
	‚Ä¢	Scheduler:
	‚Ä¢	On boot, register jobs from DB.
	‚Ä¢	Idempotent execution: write events(jobId, runAt); skip if exists.
	‚Ä¢	Centralized post wrapper (429 backoff, max retries 3, idempotency key).

Accept

curl -s -X POST "$APP_BASE_URL/api/v2/reminders" \
  -H "Content-Type: application/json" \
  -d '{"leagueId":"<LEAGUE_ID>","channelId":"<CHANNEL_ID>","text":"Set your lineup!","cron":"0 14 * * SAT"}' | jq '.ok'


‚∏ª

5) RAG polish ‚Äî /rules answers with receipts

Goal: Helpful answers, clear sources.

5.1 Rules library UI
	‚Ä¢	Dashboard shows indexed docs { title, version, chunks, updatedAt }.
	‚Ä¢	Button ‚ÄúRe-index latest‚Äù ‚Üí calls POST /api/rag/index/:leagueId with last doc content.

5.2 Answer card style
	‚Ä¢	/rules embed:
	‚Ä¢	Top answer
	‚Ä¢	‚ÄúSource:  ¬ß‚Äù
	‚Ä¢	‚ÄúDid this help? üëç/üëé‚Äù (reaction; MVP logs to events).

5.3 Index safeguards
	‚Ä¢	Validate embedding dimension matches env.
	‚Ä¢	Chunk size ~512‚Äì1024 tokens; hard cap total chunks per request.
	‚Ä¢	Content hash caching already implemented‚Äîkeep it.

Accept
	‚Ä¢	Paste rules in wizard; /rules returns an embed with a Source line.

‚∏ª

6) Engagement UI ‚Äî Polls, Highlights, Rivalries

Goal: Push-button fun, never flaky.

6.1 Polls
	‚Ä¢	Dashboard Quick Poll card mirrors /poll slash command.
	‚Ä¢	Post reactions, auto-close after duration, publish results.
	‚Ä¢	POST /api/v2/polls ‚Üí returns message link.

6.2 Highlights
	‚Ä¢	Weekly auto-highlights card; ‚ÄúMeme this‚Äù button if autoMeme on.
	‚Ä¢	Use post wrapper (idempotent + 429 safe).

6.3 Rivalries
	‚Ä¢	Display canonicalized H2H; ‚ÄúSet as featured rivalry‚Äù toggle (shows on Dashboard).

Accept
	‚Ä¢	Create poll from dashboard; appears in Discord; results embed on close.

‚∏ª

7) Slash commands ‚Äî minimum complete

Ensure the following are registered & handled:
	‚Ä¢	/help
	‚Ä¢	/rules question:<text>
	‚Ä¢	/scoring question:<text>
	‚Ä¢	/digest
	‚Ä¢	/poll
	‚Ä¢	/whoami
	‚Ä¢	/reindex

Accept
	‚Ä¢	All visible in your guild and respond without errors.

‚∏ª

8) Reliability ‚Äî Discord post pipeline everywhere
	‚Ä¢	Central postMessage uses:
	‚Ä¢	idempotency key (per content hash or explicit key)
	‚Ä¢	429 retry via retry_after
	‚Ä¢	writes events on success/failure
	‚Ä¢	Wire it through: digests, reminders, polls, highlights, welcome messages.

Accept
	‚Ä¢	Burst 5 posts quickly ‚Üí they serialize with backoff; no duplicate embeds.

‚∏ª

9) Security touches
	‚Ä¢	Session cookie: HttpOnly, Secure (prod), SameSite=Lax.
	‚Ä¢	CSRF token for browser POST/PUT/DELETE to /api/v2/*.
	‚Ä¢	Central zod validation for all inputs ‚Üí { ok:false, code, message } on error.

Accept
	‚Ä¢	POST without CSRF ‚Üí 403; with token ‚Üí 200.

‚∏ª

10) QA script & docs
	‚Ä¢	Add qa-polish.sh that exercises:
	‚Ä¢	health, events
	‚Ä¢	league GET/PATCH (toggles)
	‚Ä¢	owners map
	‚Ä¢	reminder create
	‚Ä¢	digest preview
	‚Ä¢	polls create
	‚Ä¢	Update QA_RESULTS.md with outputs.
	‚Ä¢	Update /help embed (links to dashboard & setup).
	‚Ä¢	Update replit.md for new endpoints and UI.

Accept

bash qa-polish.sh   # exits 0; ‚úî checks printed


‚∏ª

11) Migrations (only if required)
	‚Ä¢	Single idempotent migration (e.g., migrations/00xx_polish_qol.sql) to add:
	‚Ä¢	owner_links (if not using members)
	‚Ä¢	reminders
	‚Ä¢	leagues.channels JSONB column (if missing)
	‚Ä¢	Do not drop/alter existing columns/types/indexes destructively.

‚∏ª

12) Final pass (human-visible polish)
	‚Ä¢	Add micro-interactions: button loading spinners; success checkmarks; subtle toasts.
	‚Ä¢	Empty states with helpful hints.
	‚Ä¢	‚ÄúAll green‚Äù dashboard state + a subtle confetti on first completion.

Accept
	‚Ä¢	Click-through from /setup ‚Üí /dashboard feels smooth; no dead-ends; everything ‚Äújust works‚Äù.

‚∏ª

TL;DR priorities (if you need to timebox)
	1.	Dashboard toggles + channels + personality + digest controls
	2.	Owner mapping UI (teams ‚Üí users)
	3.	Reminders presets + custom + scheduler idempotency
	4.	RAG answer card with source + rules library
	5.	Polls UI + highlights safety
	6.	QA script + /help + docs

If you want, I can follow up with a tiny set of verification curls as soon as Replit says it finished this sprint, but this should be plenty to keep the agent busy and on the rails.