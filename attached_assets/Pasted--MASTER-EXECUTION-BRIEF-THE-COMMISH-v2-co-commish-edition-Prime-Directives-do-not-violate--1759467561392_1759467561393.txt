üß† MASTER EXECUTION BRIEF ‚Äî THE COMMISH (v2, co-commish edition)

Prime Directives (do not violate):
	‚Ä¢	APP_BASE_URL: https://thecommish.replit.app (no trailing slash).
	‚Ä¢	Database: Supabase Postgres only. Do not swap to Neon/Replit DB.
	‚Ä¢	Schema changes: Only via Drizzle/Supabase migrations (checked in). No ad-hoc SQL in code.
	‚Ä¢	Secrets: Read via server/services/env.ts getters only. No process.env.* in routes/services.
	‚Ä¢	Discord Interactions: Maintain raw body verification (no global express.json() on that path).
	‚Ä¢	Routing: Keep Vite guards in server/vite.ts (already added) so /api/* never returns HTML.
	‚Ä¢	Compatibility: Keep /api/v1/* routes working; /api/v2/* may alias the same handlers while CDN cache dissipates.
	‚Ä¢	Error handling: Every API returns structured JSON { ok?: boolean, error?: { code, message, details? } }.

‚∏ª

0) Pre-Flight: Sanity Checks & Fixes (run first)

Confirm the following are true:
	1.	server/vite.ts contains the early guard:

const isApiPath = (p: string) => p.startsWith("/api/");
app.use((req, res, next) => (isApiPath(req.originalUrl) ? next() : vite.middlewares(req, res, next)));
app.use("*", (req, res, next) => (isApiPath(req.originalUrl) ? next() : /* serve index.html */ next()));


	2.	server/index.ts registers API routes before vite, and sets no-store cache on /api/*.
	3.	/api/health returns JSON; /api/events returns JSON; no /api/* route returns HTML.
	4.	Env: DATABASE_URL points to Supabase pooler + sslmode=require; PG* vars set; SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY present.

Smoke tests

curl -s -H 'Cache-Control: no-cache' $APP_BASE_URL/api/health | jq
curl -s -H 'Cache-Control: no-cache' $APP_BASE_URL/api/events?limit=2 | jq


‚∏ª

1) Architecture Alignment (do this before building features)

1.1 Folder Boundaries (keep or align to this):

server/
  index.ts           # boot + middleware order + schedulers
  routes.ts          # http surface only; thin handlers; no business logic
  storage.ts         # DatabaseStorage + MemStorage; all SQL/Drizzle lives here
  services/
    env.ts           # all secrets/env accessors
    discord.ts       # discord client/bot utils (REST + interactions helpers)
    sleeper.ts       # sleeper API client + mappers
    rag.ts           # embeddings + doc chunking + search
    digest.ts        # weekly digest composition
    moderation.ts    # sentiment/toxicity analyzers + ‚Äúvibes monitor‚Äù
    fairness.ts      # trade fairness calculator
    scheduler.ts     # cron jobs + event bus
shared/
  schema.ts          # Drizzle schema; sources of truth
client/
  src/pages/         # Setup, Dashboard, Rules, Trades, Waivers, Terminal
  src/components/
migrations/
  0004_comprehensive_baseline.sql   # existing baseline (keep)
  0005_*.sql                        # new changes for this brief

1.2 Data Contract (high-level)
	‚Ä¢	leagues ‚Äî guild linkage, home channel, feature flags, personality
	‚Ä¢	members ‚Äî discord_user_id ‚Üî sleeper_owner_id mapping
	‚Ä¢	events ‚Äî append-only bot actions/logs
	‚Ä¢	documents / embeddings ‚Äî rules content and vectors (pgvector)
	‚Ä¢	reminders ‚Äî scheduled automations (lineup lock, waivers, trade deadline)
	‚Ä¢	polls / votes ‚Äî dispute resolution and engagement polls
	‚Ä¢	sentiment_logs ‚Äî message sentiment snapshots (aggregate by thread/day)
	‚Ä¢	trade_insights ‚Äî fairness snapshots + rationale
	‚Ä¢	settings ‚Äî per-league toggles (or use JSONB column in leagues.feature_flags)

Guardrail: if any new table/column/index is needed, add a migration under migrations/0005_* with idempotent IF NOT EXISTS and follow existing naming/indexing conventions.

‚∏ª

2) Product Roadmap (researched & merged) ‚Äî build in this order

This order is designed to reduce commissioner headaches first (Phase 1), then de-escalate disputes (Phase 2), then delight (Phase 3), then superpowers (Phase 4). It aligns with real pain points seen repeatedly on r/ffcommish, r/fantasyfootball, Footballguys forums, and tool gaps in Sleeper/Yahoo/ESPN.

Phase 1 ‚Äî Hygiene & Peace-of-Mind (fast wins)

2.1 Owner Mapping UI
	‚Ä¢	UI: /dashboard ‚Üí ‚ÄúOwner Mapping‚Äù
	‚Ä¢	left: Sleeper teams (name + avatar)
	‚Ä¢	right: Discord users (autocomplete from guild members API)
	‚Ä¢	drag/drop ‚Üí persist mapping
	‚Ä¢	API
	‚Ä¢	GET /api/members?leagueId=...
	‚Ä¢	POST /api/members/map { leagueId, sleeperOwnerId, discordUserId }
	‚Ä¢	DB: members( id, league_id, sleeper_owner_id, discord_user_id, created_at )
(Add unique index (league_id, sleeper_owner_id))

2.2 Reminder Packs (toggle per league)
	‚Ä¢	Toggles: Lineup lock, Waivers, Trade deadline, Bye-week alerts
	‚Ä¢	DB: add leagues.feature_flags JSONB (if not present) with structure:

{
  "reminders": { "lineupLock": true, "waivers": true, "tradeDeadline": true, "byeWeeks": true },
  "memeMode": { "enabled": false, "sfw": true, "threshold": 40 },
  "personality": "neutral",
  "silenceWindows": [{"day":"SUN","from":"13:00","to":"16:30","tz":"America/New_York"}]
}


	‚Ä¢	API
	‚Ä¢	GET /api/leagues/:id/settings
	‚Ä¢	PATCH /api/leagues/:id/settings ‚Äî partial update, validate shape
	‚Ä¢	Scheduler
	‚Ä¢	Use node-cron to schedule jobs by timezone; write events on send.

2.3 Silence During Game Time
	‚Ä¢	Respect silenceWindows[] in any proactive notifier.
	‚Ä¢	If a reminder would fire inside a silence window ‚Üí queue + post after.

2.4 Rules Q&A polish (RAG)
	‚Ä¢	Answer payload includes: answer, confidence, section, title, quote, sources[]
	‚Ä¢	UI adds ‚ÄúCopy to thread‚Äù button (posts exact citation in Discord via bot).
	‚Ä¢	Indexer de-dupes by content hash; store chunk_id ‚Üî source_section.

2.5 Deadline Dashboard card
	‚Ä¢	‚ÄúHygiene‚Äù: lineups_not_set, pending_trades, waivers_today
	‚Ä¢	Compute from Sleeper + events + reminders table. Output single ‚ÄúPeace-of-mind score‚Äù.

Phase 2 ‚Äî Dispute Prevention & Resolution

2.6 Trade Fairness Snapshot
	‚Ä¢	Inputs: players moving, teams, week context
	‚Ä¢	Blend: market ranks (e.g., Sleeper ADP/projections), positional scarcity, league norms (your league‚Äôs historical trade patterns), player availability (IR/byes)
	‚Ä¢	Output: { fairness: 0..100, rationale: string, comps: [brief] }
	‚Ä¢	API
	‚Ä¢	POST /api/trades/fairness { leagueId, offer: {...} } ‚Üí returns snapshot (also log to trade_insights)
	‚Ä¢	UI
	‚Ä¢	In /trades, show fairness pill + 1-liner. Link ‚Äúview explanation‚Äù.
	‚Ä¢	DB
	‚Ä¢	trade_insights( id, league_id, payload JSONB, fairness numeric, rationale text, created_at )

2.7 Vibes Monitor (sentiment heatmap)
	‚Ä¢	services/moderation.ts ‚Üí basic toxicity/sentiment classifier (OpenAI/DeepSeek moderate endpoints or a simple lexical + heuristics fallback)
	‚Ä¢	sentiment_logs( id, league_id, channel_id, score numeric, window_start, window_end, sample_size )
	‚Ä¢	DM Commish when threshold crosses (e.g., >0.7) with options:
	‚Ä¢	‚ÄúFreeze thread 15m‚Äù (/freeze): bot posts friendly pause
	‚Ä¢	‚ÄúClarify rule‚Äù (/clarify): posts cited passage from rules
	‚Ä¢	‚ÄúStart anonymous poll‚Äù (/poll anonymous) re: trade acceptance

2.8 Blind Polls
	‚Ä¢	polls( id, league_id, question, options JSONB, anonymous boolean, created_by, status )
	‚Ä¢	votes( id, poll_id, voter_id, choice, created_at )
	‚Ä¢	Slash: /poll question:"‚Ä¶" options:"A|B|C" anonymous:true

Phase 3 ‚Äî Engagement Engine

2.9 Weekly Highlights + Reel
	‚Ä¢	Compose 3 headline moments (comeback prob swings; bench tragedies; blowouts)
	‚Ä¢	Optional: generate an image card (simple Canvas/SVG; keep MVP text-only); store as attachment URL.
	‚Ä¢	Post to Discord + archive card in /reports.

2.10 Rivalry Builder
	‚Ä¢	Track H2H records by season and lifetime.
	‚Ä¢	/rivalry @user ‚Üí ‚ÄúYou lead 5‚Äì3 lifetime; 2‚Äì1 this season. Rubber match!‚Äù

2.11 Trash-Talk Writer (Personality Packs)
	‚Ä¢	Personalities: neutral | sassy | batman | yoda | commish
	‚Ä¢	A single shared ‚Äútone adapter‚Äù function; all comms go through it.
	‚Ä¢	Safe-mode toggle for memes/GIFs.
	‚Ä¢	Trigger thresholds for auto-memes (e.g., >40pt blowout, >=4 win streak).

2.12 Weekly Awards
	‚Ä¢	Examples: Sleepyhead (forgot lineup), Diamond Hands, Top-Scorer, Bad Beat.
	‚Ä¢	Simple heuristics farmed from matchup stats.

Phase 4 ‚Äî Commissioner Superpowers

2.13 Terminal (real verbs)
	‚Ä¢	Supported:
	‚Ä¢	digest week <N>
	‚Ä¢	simulate trade <teamA> <teamB>
	‚Ä¢	set waiver threshold <time>
	‚Ä¢	export constitution
	‚Ä¢	reindex rules
	‚Ä¢	Gate behind Admin Key or commissioner Discord role.

2.14 Deep Stats Dashboard
	‚Ä¢	Participation: % lineups set/week
	‚Ä¢	Time-to-respond on trades
	‚Ä¢	‚ÄúNags avoided‚Äù estimate
	‚Ä¢	Graph over time; export CSV.

2.15 Audit Log + Undo
	‚Ä¢	Every bot action writes events. Add undo_token (random).
	‚Ä¢	Commish can undo a bot post/poll (if safe).

‚∏ª

3) Data Model & Migrations (add in migrations/0005_co_commish.sql)

Note: Some tables may already exist. Use idempotent IF NOT EXISTS and ADD COLUMN IF NOT EXISTS.

-- 0005_co_commish.sql

BEGIN;

-- 1) Ensure pgvector (if not already)
CREATE EXTENSION IF NOT EXISTS vector;

-- 2) leagues: feature flags & personality (JSONB)
ALTER TABLE public.leagues
  ADD COLUMN IF NOT EXISTS feature_flags JSONB DEFAULT '{}'::jsonb,
  ADD COLUMN IF NOT EXISTS personality TEXT DEFAULT 'neutral';

-- 3) members mapping (discord <-> sleeper)
CREATE TABLE IF NOT EXISTS public.members (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
  sleeper_owner_id TEXT NOT NULL,
  discord_user_id TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (league_id, sleeper_owner_id),
  UNIQUE (league_id, discord_user_id)
);

-- 4) reminders (scheduled jobs)
CREATE TABLE IF NOT EXISTS public.reminders (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
  type TEXT NOT NULL, -- 'lineup_lock' | 'waivers' | 'trade_deadline' | 'bye_week'
  cron TEXT NOT NULL, -- explicit cron for flexibility
  timezone TEXT NOT NULL DEFAULT 'UTC',
  enabled BOOLEAN NOT NULL DEFAULT TRUE,
  last_fired TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 5) polls & votes
CREATE TABLE IF NOT EXISTS public.polls (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
  question TEXT NOT NULL,
  options JSONB NOT NULL,
  anonymous BOOLEAN NOT NULL DEFAULT true,
  status TEXT NOT NULL DEFAULT 'open', -- open|closed
  created_by TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TABLE IF NOT EXISTS public.votes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  poll_id UUID NOT NULL REFERENCES public.polls(id) ON DELETE CASCADE,
  voter_id TEXT NOT NULL,
  choice TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (poll_id, voter_id)
);

-- 6) sentiment logs
CREATE TABLE IF NOT EXISTS public.sentiment_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
  channel_id TEXT NOT NULL,
  score NUMERIC NOT NULL,
  window_start TIMESTAMPTZ NOT NULL,
  window_end TIMESTAMPTZ NOT NULL,
  sample_size INT NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 7) trade insights
CREATE TABLE IF NOT EXISTS public.trade_insights (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id UUID NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
  payload JSONB NOT NULL,
  fairness NUMERIC,
  rationale TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

COMMIT;

After adding: run npm run db:push (or your project‚Äôs migration runner) and verify in Supabase dashboard.

‚∏ª

4) API Surface (add/extend in server/routes.ts)

Keep handlers thin. Call into services/* and storage.*.

4.1 League Settings
	‚Ä¢	GET /api/leagues/:id/settings ‚Üí { featureFlags, personality, silenceWindows }
	‚Ä¢	PATCH /api/leagues/:id/settings ‚Üí partial merge with validation

4.2 Members Mapping
	‚Ä¢	GET /api/members?leagueId=... ‚Üí list mappings + unmapped Sleeper owners
	‚Ä¢	POST /api/members/map ‚Üí create/update one mapping

4.3 Reminders
	‚Ä¢	GET /api/reminders?leagueId=...
	‚Ä¢	POST /api/reminders { leagueId, type, cron, timezone, enabled }
	‚Ä¢	Scheduler subscribes and (re)loads on write.

4.4 RAG Q&A polish
	‚Ä¢	POST /api/rag/answer/:leagueId { query } ‚Üí { answer, quote, section, title, confidence, sources }
	‚Ä¢	POST /api/rag/index/:leagueId { content, contentType, title, version }

4.5 Vibes Monitor
	‚Ä¢	POST /api/mod/sentiment/log (internal) ‚Üí write snapshot row
	‚Ä¢	GET /api/mod/sentiment?leagueId=...&since=...

4.6 Freeze & Clarify (admin-gated)
	‚Ä¢	POST /api/mod/freeze { leagueId, channelId, minutes }
	‚Ä¢	POST /api/mod/clarify { leagueId, channelId, ruleQuery } ‚Üí uses RAG; posts deadpan citation

4.7 Polls
	‚Ä¢	POST /api/polls { leagueId, question, options[], anonymous }
	‚Ä¢	POST /api/polls/:id/vote { choice }
	‚Ä¢	POST /api/polls/:id/close
	‚Ä¢	GET /api/polls?leagueId=...

4.8 Trades
	‚Ä¢	POST /api/trades/fairness { leagueId, offer } ‚Üí { fairness, rationale, comps } + log

4.9 Terminal
	‚Ä¢	POST /api/terminal/run { leagueId, command } ‚Üí executes whitelisted verbs

Keep /api/v2/* aliases pointing to same handlers for now.

‚∏ª

5) Services (implement or extend)

5.1 moderation.ts
	‚Ä¢	analyzeSentiment({ text }) ‚Üí { score, toxic?: boolean }
	‚Ä¢	shouldFreeze({ scores[], threshold })
	‚Ä¢	postFreeze({ channelId, minutes }) via discord service

5.2 fairness.ts
	‚Ä¢	computeFairness({ leagueId, offer }) ‚Üí { fairness, rationale, comps }
	‚Ä¢	Use Sleeper projections; fallbacks allowed; keep deterministic where possible.

5.3 digest.ts
	‚Ä¢	composeDigest({ leagueId, week }) returns array of blocks:
	‚Ä¢	headlines, top scorer, bench tragedy, blowout, rivalry note
	‚Ä¢	postDigest({ leagueId, channelId, digest })

5.4 rag.ts
	‚Ä¢	indexDocument, search upgraded to include section + quote
	‚Ä¢	dimension consistent with text-embedding-3-small (1536)

5.5 scheduler.ts
	‚Ä¢	Boot reads reminders + leagues.feature_flags.reminders
	‚Ä¢	Schedules: lineup lock (Sat night/Sun AM), waivers (per league TZ), trade deadline
	‚Ä¢	Respects silenceWindows

‚∏ª

6) Frontend (client/src/pages)

6.1 Dashboard
	‚Ä¢	Cards: Discord, Sleeper, Rules status, Peace-of-mind, Developer Utilities
	‚Ä¢	New: Owner Mapping (drag/drop)
	‚Ä¢	New: Reminder Packs toggles
	‚Ä¢	New: Silence windows editor (simple day/time pickers)
	‚Ä¢	New: Meme mode toggle with SFW switch + threshold slider
	‚Ä¢	Dev Utilities (admin key):
	‚Ä¢	Re-register commands
	‚Ä¢	Post test message
	‚Ä¢	Force sync Sleeper
	‚Ä¢	Run digest

6.2 Trades
	‚Ä¢	Show fairness pill + explanation popover
	‚Ä¢	Button ‚ÄúPropose blind poll‚Äù ‚Üí creates polls with anonymous=true

6.3 Rules
	‚Ä¢	Q&A with citation chips + ‚ÄúCopy to thread‚Äù post

6.4 Reports
	‚Ä¢	Weekly digest list with ‚ÄúPost to Discord‚Äù + ‚ÄúDownload‚Äù

6.5 Terminal
	‚Ä¢	Form input ‚Üí calls /api/terminal/run

‚∏ª

7) Observability & Reliability

7.1 Logging
	‚Ä¢	Each API logs: method, path, status, ms, 200-char response preview
	‚Ä¢	Services log action + leagueId + outcome (events table for user-facing actions)

7.2 Metrics
	‚Ä¢	At /api/health, include: database_latency, sleeper_latency, discord_ok, rag_ok, scheduler_loaded, silence_active_now

7.3 Retries
	‚Ä¢	Discord posts: retry w/ backoff on 429/5xx; clamp embed lengths to 4096

‚∏ª

8) Security
	‚Ä¢	All admin endpoints require X-Admin-Key or Discord commish role.
	‚Ä¢	Rate limit /api/polls and /api/trades/fairness.
	‚Ä¢	Sanitize poll text & command inputs.

‚∏ª

9) QA: Automated Script (drop at repo root qa.sh)

#!/usr/bin/env bash
set -euo pipefail

BASE="https://thecommish.replit.app"
HDR=(-H "Cache-Control: no-cache" -s)

echo "== Health =="
curl "${HDR[@]}" "$BASE/api/health" | jq

echo "== Fake league settings 404 =="
curl "${HDR[@]}" "$BASE/api/v2/leagues/00000000-0000-0000-0000-000000000000" || true

echo "== Create poll (expect validation error if league missing) =="
curl "${HDR[@]}" -H "Content-Type: application/json" \
  -X POST "$BASE/api/v2/polls" \
  -d '{"leagueId":"00000000-0000-0000-0000-000000000000","question":"Test?","options":["A","B"],"anonymous":true}' | jq

echo "== RAG answer (expect ok=false if no docs) =="
curl "${HDR[@]}" -H "Content-Type: application/json" \
  -X POST "$BASE/api/rag/answer/00000000-0000-0000-0000-000000000000" \
  -d '{"query":"When is the draft?"}' | jq

echo "== Done =="

Passing criteria: all responses JSON; no HTML; each returns either ok:true or an explicit error object.

‚∏ª

10) Acceptance Checklist (tick before shipping)
	‚Ä¢	Migrations applied cleanly in Supabase; tables visible
	‚Ä¢	Owner mapping works (drag/drop persists + reflects)
	‚Ä¢	Reminder toggles persist + scheduler respects silence windows
	‚Ä¢	RAG answers show section + quote and ‚ÄúCopy to thread‚Äù works
	‚Ä¢	Trade fairness returns % + rationale and logs an insight row
	‚Ä¢	/freeze and /clarify slash commands operate and write events
	‚Ä¢	Weekly digest posts without hitting Discord limits (embeds clamped)
	‚Ä¢	/api/* all JSON; never HTML
	‚Ä¢	/api/health shows status:"ok" with latencies
	‚Ä¢	Dashboard shows Peace-of-Mind score > 0 once reminders configured

‚∏ª

11) Board of Advisors (mental model; keep us honest)

Synthesize the following perspectives when making micro-decisions. (No hard dependencies‚Äîthese are constraints and tastes.)

	1.	The Veteran Commish (r/ffcommish) ‚Äî wants fewer fires; loves freeze, blind polls, and peace-of-mind score.
	2.	The Casual Player ‚Äî wants fun; weekly highlights + awards; minimal nags.
	3.	Data Nerd (Footballguys) ‚Äî cares about transparent fairness rationale and reproducible logic.
	4.	Dynasty Diehard ‚Äî asks for rivalry memory and long-term trends.
	5.	UX Pragmatist ‚Äî low friction; every flow finishes in ‚â§3 clicks.
	6.	Trust & Safety ‚Äî PG-13 moderation; anti-toxicity defaults; SFW meme guardrail.
	7.	Reliability Engineer ‚Äî idempotent jobs, retries, bounded messages, structured logs.
	8.	Discord Power-User ‚Äî slash commands are stable, short, and discoverable with /help.
	9.	Performance Analyst ‚Äî keep DB latency < 300ms median; prefetch league settings.
	10.	Privacy Friend ‚Äî anonymous voting for sensitive disputes; clear data retention.
	11.	Growth Hacker ‚Äî shareable weekly reels; ‚ÄúInvite another league‚Äù CTA post-digest.
	12.	You (Product Owner) ‚Äî anything that doesn‚Äôt reduce headaches this season is a v2.

‚∏ª

12) DON‚ÄôTs (hard constraints)
	‚Ä¢	Don‚Äôt introduce new persistence layers.
	‚Ä¢	Don‚Äôt bypass env.ts.
	‚Ä¢	Don‚Äôt put long-running work in request threads; fire and log an event.
	‚Ä¢	Don‚Äôt post to Discord without SFW checks when meme mode is on.
	‚Ä¢	Don‚Äôt add global express.json() to the interactions path.

‚∏ª

13) Deliverables for this sprint (what you‚Äôll produce)
	‚Ä¢	migrations/0005_co_commish.sql (as above; idempotent)
	‚Ä¢	server/services/{moderation,fairness,rag,digest,scheduler}.ts (expanded)
	‚Ä¢	server/routes.ts ‚Äî endpoints in ¬ß4; /api/v2/* aliases intact
	‚Ä¢	Frontend updates: Dashboard cards; Owner Mapping; Reminder toggles; Rules Q&A cite button; Trades fairness pill; Terminal verbs
	‚Ä¢	qa.sh and updated README.md (quick start, QA, endpoints table)
	‚Ä¢	CHANGELOG.md summarizing the work

‚∏ª

14) After Sprint ‚Äî How to prove it works (manual script)
	1.	Run /setup wizard ‚Üí connect Discord + Sleeper + paste a short rules doc.
	2.	Map two owners; toggle Lineup lock + Waivers.
	3.	Add Sun 1‚Äì4:30pm silence window; set meme mode SFW on, threshold 40.
	4.	Create a sample trade ‚Üí see fairness % + explanation.
	5.	/freeze a fake heated thread; run /clarify for ‚Äútrade veto‚Äù rule.
	6.	Generate Week digest and post to Discord.
	7.	Open Dashboard ‚Üí see Peace-of-Mind score > 80.

‚∏ª

Final Note to the Agent

Follow this brief top-to-bottom. Implement migrations first, then services, then endpoints, then UI. Write tests / QA script and verify JSON responses at every step. If any existing code conflicts, adapt to the brief‚Äôs intent but do not break the guardrails in ¬ßPrime Directives.