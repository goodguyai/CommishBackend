Got it. Let‚Äôs make the bot actually work inside Discord and keep it in lock-step with your Beta features. Below is a complete, end-to-end blueprint for THE COMMISH‚Äôs Discord bot + APIs + Supabase + DeepSeek + Sleeper. It‚Äôs opinionated, production-grade, and maps every Beta feature to concrete bot abilities, routes, tables, and tests‚Äîso you and Replit can wire it once and stop bleeding time.

I split this into 12 tight sections you can hand to the Replit Agent as a single work order.

‚∏ª

0) North-Star: What ‚ÄúWorking‚Äù Means

In a real server, after setup:
	‚Ä¢	/rules answers from your indexed constitution using DeepSeek.
	‚Ä¢	/digest posts today‚Äôs digest into the configured channel.
	‚Ä¢	/poll creates a poll with options + duration + tallies live.
	‚Ä¢	/whoami tells a user their mapped fantasy team (from Owner Mapping).
	‚Ä¢	Reminders (lineup lock, waivers, trades) post on schedule.
	‚Ä¢	Highlights / Rivalries post on triggers (weekly win, rivalry week).
	‚Ä¢	Bot reacts (üëç‚ù§Ô∏è) to messages that meet your sentiment criteria (selective).
	‚Ä¢	All commands and posts honor channel routing, rate limits, idempotency, and produce traceable logs with request IDs.

‚∏ª

1) Discord App & Permissions (must match code)

Scopes: bot applications.commands
Bot Intents:
	‚Ä¢	Privileged: Message Content (for sentiment/reactions)
	‚Ä¢	Recommended: Server Members (for mapping/help text)
Permissions integer (set on Bot tab and used in install URL):
	‚Ä¢	View Channels, Send Messages, Manage Messages, Read Message History, Embed Links, Add Reactions, Mention Everyone, Use Slash Commands, Create Polls.

Keep this integer in DISCORD_BOT_PERMISSIONS. The install URL must not have redirect_uri.

Install URL (generated by backend; what we fixed):
	‚Ä¢	client_id = your app id
	‚Ä¢	scope = bot applications.commands
	‚Ä¢	permissions = DISCORD_BOT_PERMISSIONS
	‚Ä¢	guild_id = selected guild
	‚Ä¢	disable_guild_select = true

Slash command registration: global (or per-guild during dev). Re-register on deploys.

‚∏ª

2) Runtime Architecture (reliable by design)
	‚Ä¢	Express API /api/v2/* (session secured)
	‚Ä¢	Discord interaction endpoint /api/discord/interactions (raw body, Ed25519 verify)
	‚Ä¢	Worker (same process or separate):
	‚Ä¢	Job queue for outbound Discord posts (idempotent key = guildId:channelId:type:hash(payload); 3 retries; respect retry_after)
	‚Ä¢	Schedules (cron) for reminders/digests
	‚Ä¢	DeepSeek client with conservative timeouts + circuit breaker
	‚Ä¢	Sleeper client for league data
	‚Ä¢	Supabase for state (schema below)
	‚Ä¢	Feature flags & channel routing resolved per leagueId at execution time
	‚Ä¢	Observability: request IDs; structured logs; doctor endpoints

‚∏ª

3) Supabase Schema (tables you need)

-- Core entities
CREATE TABLE IF NOT EXISTS accounts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  email text UNIQUE NOT NULL,
  name text,
  plan text NOT NULL DEFAULT 'beta',
  created_at timestamptz NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS leagues (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  account_id uuid REFERENCES accounts(id),
  name text,
  features jsonb NOT NULL DEFAULT '{}'::jsonb,      -- { activated: true, demo: false, sleeper:{...}, ... }
  channels jsonb NOT NULL DEFAULT '{}'::jsonb,      -- { discord:{ guildId, channelId, pollsId?, highlightsId? } }
  personality jsonb NOT NULL DEFAULT '{}'::jsonb,   -- tone knobs for LLM
  created_at timestamptz NOT NULL DEFAULT now()
);

-- Discord user ‚Üî fantasy team mapping
CREATE TABLE IF NOT EXISTS owners (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id uuid REFERENCES leagues(id) ON DELETE CASCADE,
  discord_user_id text,
  sleeper_owner_id text,
  display_name text,
  UNIQUE (league_id, discord_user_id),
  UNIQUE (league_id, sleeper_owner_id)
);

-- Indexed rules documents (for RAG)
CREATE TABLE IF NOT EXISTS rules_docs (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id uuid REFERENCES leagues(id) ON DELETE CASCADE,
  title text,
  source text,                -- 'paste' | 'upload' | 'url'
  chunk_count int,
  created_at timestamptz DEFAULT now()
);

-- Scheduled reminders (presets + custom)
CREATE TABLE IF NOT EXISTS reminders (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id uuid REFERENCES leagues(id) ON DELETE CASCADE,
  type text NOT NULL,         -- 'lineup_lock' | 'waivers' | 'trade_deadline' | 'custom'
  cron text NOT NULL,         -- cron or iso schedule
  channel_key text NOT NULL,  -- 'discord.main' or 'discord.polls'
  payload jsonb NOT NULL DEFAULT '{}'::jsonb,
  enabled boolean NOT NULL DEFAULT true,
  last_run_at timestamptz
);

-- Bot activity & audit
CREATE TABLE IF NOT EXISTS bot_activity (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  league_id uuid,
  guild_id text,
  channel_id text,
  kind text,                  -- 'MESSAGE_POSTED' | 'COMMAND_RUN' | 'RETRY' | 'ERROR'
  key text,                   -- idempotency key
  status text,                -- 'ok' | 'retry' | 'fail'
  detail jsonb,
  created_at timestamptz DEFAULT now()
);


‚∏ª

4) API Contracts (stable, predictable)

Setup
	‚Ä¢	GET /api/v2/discord/auth-url ‚Üí { url }
	‚Ä¢	GET /api/v2/setup/discord-session ‚Üí { guilds:[{id,name,icon}] }
	‚Ä¢	GET /api/v2/discord/channels?guildId=...
	‚Ä¢	200 { channels:[{id,name,type}] }
	‚Ä¢	409 { error:'BOT_NOT_IN_GUILD' }
	‚Ä¢	POST /api/v2/discord/bot-install-url?guildId=... (or GET) ‚Üí { url }
	‚Ä¢	POST /api/v2/setup/account { email, name } ‚Üí { ok, accountId }
	‚Ä¢	POST /api/v2/setup/discord { guildId, channelId, leagueId? } ‚Üí { ok, leagueId }
	‚Ä¢	POST /api/v2/setup/sleeper { username, season, leagueId } ‚Üí { ok }
	‚Ä¢	POST /api/v2/setup/activate { leagueId } ‚Üí { ok }

Commissioner controls (Dashboard)
	‚Ä¢	GET /api/v2/leagues/:id ‚Üí league record
	‚Ä¢	PATCH /api/v2/leagues/:id ‚Üí update features/channels/personality
	‚Ä¢	GET /api/v2/owners?leagueId=...
	‚Ä¢	POST /api/v2/owners/map { leagueId, discordUserId, sleeperOwnerId }
	‚Ä¢	GET /api/v2/reminders?leagueId=...
	‚Ä¢	POST /api/v2/reminders / PATCH /api/v2/reminders/:id / DELETE ...

RAG
	‚Ä¢	POST /api/v2/rules/index { leagueId, title, text }
	‚Ä¢	GET /api/v2/rules/stats?leagueId=... ‚Üí { docs, chunks }
	‚Ä¢	POST /api/v2/rules/ask { leagueId, question } ‚Üí { answer, sources }

Doctors
	‚Ä¢	GET /api/_debug/health (admin) ‚Üí DB/Discord/DeepSeek/session summary
	‚Ä¢	GET /api/v2/doctor/discord ‚Üí bot user, base URL checks
	‚Ä¢	GET /api/v2/doctor/sleeper ‚Üí ok
	‚Ä¢	GET /api/v2/doctor/ai ‚Üí DeepSeek ok

‚∏ª

5) Slash Commands (bot feature parity with Beta)

Command	Purpose	Options	Response
/help	Show command list and dashboard link	‚Äì	Ephemeral embed
/whoami	Show user‚Äôs mapped team	‚Äì	Ephemeral text
/rules	Ask constitution	question (string)	Ephemeral answer (RAG)
/scoring	Ask scoring rules	question (string)	Ephemeral
/poll	Create a poll	question, option1..5, duration	Public poll embed + tallies
/digest	Post daily/weekly digest	scope (`today	week), dry_run` (bool)
/reindex	Reindex rules	‚Äì	Ephemeral
/set-league	Set league for this channel (escape hatch)	league_id	Ephemeral
/doctor	Quick health summary in-guild	‚Äì	Ephemeral

Command resolution order:
	1.	From channel context (leagues.channels.discord)
	2.	From selectedLeagueId stored per guild/channel in leagues.channels
	3.	Fallback to /set-league or error if ambiguous

‚∏ª

6) Events & Reactions (sentiment hygiene)

Events (Gateway Intents on):
	‚Ä¢	MESSAGE_CREATE (read content)
	‚Ä¢	GUILD_CREATE (cache guild/permissions)
	‚Ä¢	Optional MESSAGE_UPDATE (if you want to re-evaluate)

Selective reactions:
	‚Ä¢	Compute sentiment / criteria (e.g., regex on ‚ÄúGG‚Äù, ‚Äúgreat trade‚Äù, or LLM classify); apply cooldowns per user/thread; react with üëç/‚ù§Ô∏è only if not spammy and if bot has Add Reactions in that channel.

Permission guard:
	‚Ä¢	Before reacting or posting: verify VIEW_CHANNEL, READ_MESSAGE_HISTORY, SEND_MESSAGES, EMBED_LINKS, ADD_REACTIONS for the bot. If missing, log + ephemeral warn to commissioner.

‚∏ª

7) DeepSeek & Sleeper flows (that actually return)

Rules Q&A (RAG ‚Üí DeepSeek):
	1.	Retrieve top chunks from rules_docs vectors
	2.	Build prompt with league personality knobs (tone)
	3.	Call DeepSeek (short completion, streaming optional)
	4.	Return succinct answer + sources
	5.	If fail: graceful degradation with FAQ fallback

Digest:
	1.	Pull Sleeper (matchups, standings, transactions)
	2.	Summarize via DeepSeek with deterministic ‚Äúbulletized‚Äù template
	3.	Post embed in channels.discord.channelId
	4.	Log bot_activity

Poll:
	‚Ä¢	Use Discord Polls or a custom message with reactions; in both cases, store a poll_id in bot_activity.detail for tally edits; close after duration.

Reminders:
	‚Ä¢	Cron per row in reminders ‚Üí produce messages (respect channel route keys).
	‚Ä¢	Idempotency key = leagueId:reminderId:datebucket.

‚∏ª

8) Reliability & Rate-limit discipline
	‚Ä¢	Idempotency: compute hash of normalized payload; drop dupes within 24h window.
	‚Ä¢	429: read Discord‚Äôs retry_after, exponential backoff (1s/2s/4s).
	‚Ä¢	Network: 2 retry budget on 5xx; never retry on 4xx (except 429).
	‚Ä¢	Poison pill: 3 fails ‚Üí mark job failed, emit bot_activity with detail.
	‚Ä¢	Outbox pattern (optional): persist queued posts in DB, worker drains.
	‚Ä¢	Posting budget: per guild queue to avoid bursts.

‚∏ª

9) Security
	‚Ä¢	/api/discord/interactions: express.raw, Ed25519 verify request signatures.
	‚Ä¢	Sessions: trust proxy, secure cookie, sameSite:lax, credentials:'include'.
	‚Ä¢	CSRF: apply to app POST routes, not the Discord signature endpoint.
	‚Ä¢	Admin endpoints: require X-Admin-Key.
	‚Ä¢	Minimal scopes: user OAuth uses identify guilds; bot auth uses bot applications.commands.
	‚Ä¢	Sanitize any user text echoed into embeds.

‚∏ª

10) Observability
	‚Ä¢	Request IDs on every API + command (log [reqId]).
	‚Ä¢	bot_activity row per command/post/retry/error.
	‚Ä¢	/api/_debug/health: DB latency, Discord bot user id, DeepSeek model ping, session keys.
	‚Ä¢	/api/v2/doctor/*`: quick green/red for Discord, Sleeper, AI.
	‚Ä¢	Playwright artifacts: screenshots + console logs on failure.

‚∏ª

11) Tests (agentic e2e you can re-run)

Playwright suites (extend what you have):
	‚Ä¢	00_doctor.spec.ts ‚Üí doctors green
	‚Ä¢	01_home_cta.spec.ts ‚Üí ok
	‚Ä¢	02_demo_activation.spec.ts ‚Üí ok
	‚Ä¢	03_setup_account.spec.ts ‚Üí ok
	‚Ä¢	04_setup_discord_install_gap.spec.ts ‚Üí install flow works
	‚Ä¢	05_setup_discord_submit.spec.ts ‚Üí no UUID crash; returns leagueId
	‚Ä¢	06_setup_sleeper.spec.ts ‚Üí links league, writes into features.sleeper
	‚Ä¢	07_rules_index.spec.ts ‚Üí stats > 0
	‚Ä¢	08_dashboard_beta.spec.ts ‚Üí Beta badge, buttons wired (no 404s)
	‚Ä¢	09_discord_post_pipeline.spec.ts (admin) ‚Üí post test, see idempotency/429 handling in logs
	‚Ä¢	10_commands_live.spec.ts (manual server with bot installed):
	‚Ä¢	Run /whoami, /rules question: "trade veto" (ephemeral returns), /poll (public), /digest dry_run:true (ephemeral)
	‚Ä¢	Assert Discord API calls succeed (via API spy logs) and bot_activity rows created

Sweep script (one button):
	‚Ä¢	Hit doctors
	‚Ä¢	Hit route manifest
	‚Ä¢	Verify Supabase migrations exist & columns present (channels jsonb, features jsonb, defaults)
	‚Ä¢	Dump current league row and ensure features.activated === true after setup
	‚Ä¢	Send a test post; check it lands and no duplicates are posted when re-run

‚∏ª

12) Rollout order for Replit (do this, in order)
	1.	DB: run gen_random_uuid defaults + ensure channels, features, personality exist (jsonb).
	2.	Server:
	‚Ä¢	Install URL endpoint (no redirect_uri)
	‚Ä¢	Channels endpoint returns BOT_NOT_IN_GUILD
	‚Ä¢	POST /api/v2/setup/discord accepts optional leagueId, generates on server
	‚Ä¢	Doctors: discord, sleeper, ai; admin health
	‚Ä¢	Interaction endpoint raw + signature verify
	‚Ä¢	Job queue wrapper for posting (idempotent + retries)
	3.	Client:
	‚Ä¢	Onboarding: Account ‚Üí Discord (install flow with pending-guild-id) ‚Üí Sleeper ‚Üí Rules ‚Üí redirect to /app, store selectedLeagueId
	‚Ä¢	AppShell: compute Demo vs Beta by featureFlags.demo
	‚Ä¢	Dashboard: real actions wired; it‚Äôs fine if display stats are mock temporarily
	4.	Secrets: set DISCORD_BOT_PERMISSIONS, verify APP_BASE_URL lowercase.
	5.	Doctors: run them; fix anything red before clicking through.
	6.	Playwright: run full suite; save artifacts.
	7.	Live validation: use /doctor & /help inside Discord, then /rules, /poll, /digest.

‚∏ª

Frequent gotchas (so you don‚Äôt stall):
	‚Ä¢	Empty UUID crash (you hit this): always generate leagueId server-side if missing.
	‚Ä¢	Install URL using redirect_uri: remove it (user OAuth uses redirect; bot install does not).
	‚Ä¢	Bot not in guild: backend must return BOT_NOT_IN_GUILD; frontend must show Install and auto-retry after return.
	‚Ä¢	Session cookie not sticking: trust proxy, secure cookie, credentials:'include'.
	‚Ä¢	Interactions route broken by body parser: raw body before any JSON middlewares.
	‚Ä¢	429 spam: respect retry_after, idempotent keys, queue per guild.
	‚Ä¢	Commands not showing: re-register slash commands after changing definitions.

‚∏ª

Where this maps to your Beta features
	‚Ä¢	Commissioner Dashboard toggles ‚Üí stored in leagues.features & channels; bot reads these at runtime for every command/post.
	‚Ä¢	Channel routing ‚Üí leagues.channels.discord.{ mainId, pollsId, highlightsId } used per feature.
	‚Ä¢	Bot personality ‚Üí leagues.personality injected into DeepSeek prompts.
	‚Ä¢	Owner mapping ‚Üí /whoami and digest mentions resolve to team names.
	‚Ä¢	Reminders & schedules ‚Üí reminders table + cron worker; posts are queued.
	‚Ä¢	RAG quality ‚Üí /rules/index + /rules/ask with DeepSeek; /reindex when docs change.
	‚Ä¢	Engagement ‚Üí /poll, selective reactions, highlights/rivalries as scheduled/triggered posts.
	‚Ä¢	Reliability ‚Üí posting pipeline wrapper (idempotency, retries, rate limit).
	‚Ä¢	Security ‚Üí cookies set right, CSRF on app endpoints, signatures on interactions.
	‚Ä¢	Observability ‚Üí doctors + bot_activity.

‚∏ª

If you hand this exact blueprint to Replit and have them implement the missing server endpoints, the posting wrapper, and the Discord interaction handlers per the contracts above, your bot will not just install‚Äîit will function and stay aligned with the Beta feature set you see in the dashboard.

If you want, I can turn this into a single ‚ÄúReplit Work Order.md‚Äù plus a migration script and a minimal command handler skeleton next.